import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"docker","description":"","frontmatter":{"title":"docker","isTimeLine":true,"date":"11-16-2023"},"headers":[],"relativePath":"front/CICD/docker-jenkins.md","filePath":"front/CICD/docker-jenkins.md","lastUpdated":1701327138000}');
const _sfc_main = { name: "front/CICD/docker-jenkins.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="docker" tabindex="-1">docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;docker&quot;">​</a></h1><h2 id="部署gitlab" tabindex="-1">部署gitlab <a class="header-anchor" href="#部署gitlab" aria-label="Permalink to &quot;部署gitlab&quot;">​</a></h2><ul><li>gitlab部署最小需要4G内存</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">web</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;gitlab/gitlab-ee:latest&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: always  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">hostname</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;192.168.25.128&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">environment</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    	</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">GITLAB_OMNIBUS_CONFIG</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        external_url </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://192.168.25.128:8090&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        # Add any other gitlab.rb configuration here, each on its own line </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">       </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;8090:8090&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   # 将容器的数据拷贝存到主机中</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">     </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/srv/gitlab/config:/etc/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">     </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/srv/gitlab/logs:/var/log/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">     </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/srv/gitlab/data:/var/opt/gitlab&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">web</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;gitlab/gitlab-ee:latest&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: always  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">hostname</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;192.168.25.128&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">environment</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    	</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">GITLAB_OMNIBUS_CONFIG</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        external_url </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://192.168.25.128:8090&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        # Add any other gitlab.rb configuration here, each on its own line </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">       </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;8090:8090&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   # 将容器的数据拷贝存到主机中</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">     </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/srv/gitlab/config:/etc/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">     </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/srv/gitlab/logs:/var/log/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">     </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/srv/gitlab/data:/var/opt/gitlab&#39;</span></span></code></pre></div><h2 id="部署dockerhub" tabindex="-1">部署dockerhub <a class="header-anchor" href="#部署dockerhub" aria-label="Permalink to &quot;部署dockerhub&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;registry:2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">containers</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">dockerhub</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">		- </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;5000:5000&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">		- </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/home/dockerhub/data:/var/lib/registry&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;registry:2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">containers</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">dockerhub</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">		- </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;5000:5000&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">		- </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/home/dockerhub/data:/var/lib/registry&#39;</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 由于Docker CLI客户端默认以HTTPS访问，而部署的registry并未提供HTTPS，因此，需要在pull镜像的Docker主机添加HTTP可信任：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">vi</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/etc/docker/daemon.json</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 每台需要访问私有镜像仓库的都要配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">&quot;insecure-registries&quot;</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">&quot;192.168.1.99:5000&quot;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 然后重新启动docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">daemon-reload</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> &amp;&amp; </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 测试仓库是否ok</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">pull</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">tag</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">ubuntu</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">localhost:5000/ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">push</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">localhost:5000/ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看已上传的镜像</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">curl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">http://localhost:5000/v2/_catalog</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 由于Docker CLI客户端默认以HTTPS访问，而部署的registry并未提供HTTPS，因此，需要在pull镜像的Docker主机添加HTTP可信任：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">vi</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/etc/docker/daemon.json</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 每台需要访问私有镜像仓库的都要配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">&quot;insecure-registries&quot;</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">&quot;192.168.1.99:5000&quot;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 然后重新启动docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">daemon-reload</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> &amp;&amp; </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 测试仓库是否ok</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">pull</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">tag</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">ubuntu</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">localhost:5000/ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">push</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">localhost:5000/ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看已上传的镜像</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">curl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">http://localhost:5000/v2/_catalog</span></span></code></pre></div><h2 id="部署jenkins" tabindex="-1">部署jenkins <a class="header-anchor" href="#部署jenkins" aria-label="Permalink to &quot;部署jenkins&quot;">​</a></h2><ul><li>创建jenkins的工作目录并赋予权限</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">mkdir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-p</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins_home</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">chown</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-R</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#把当前目录的拥有者赋值给uid 1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">mkdir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-p</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins_home</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">cd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">chown</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-R</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#把当前目录的拥有者赋值给uid 1000</span></span></code></pre></div><ul><li>编写docker-compose文件</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">version</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">services</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">docker_jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">user</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">root</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">8050:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">expose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;8050&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">version</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">services</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">docker_jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">user</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">root</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">8050:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">expose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;8050&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span></code></pre></div><ul><li>启动容器</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins_home/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">cd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins_home/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-d</span></span></code></pre></div><ul><li>开放防火墙8080端口</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--zone=public</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--add-port=8080/tcp</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--permanent</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-reload</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--zone=public</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--add-port=8080/tcp</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--permanent</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-reload</span></span></code></pre></div><ul><li></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">vi</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins_home/hudson.model.UpdateCenter.xml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># hudson.model.UpdateCenter.xml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;?</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">xml version=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;1.1&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> encoding=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;UTF-8&#39;</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">sites</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">id&gt;default&lt;/id&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">/site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">/sites</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">vi</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins_home/hudson.model.UpdateCenter.xml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># hudson.model.UpdateCenter.xml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;?</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">xml version=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;1.1&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> encoding=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;UTF-8&#39;</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">sites</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">id&gt;default&lt;/id&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">/site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">/sites</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&gt;</span></span></code></pre></div><h2 id="nginx和jenkins聚集部署" tabindex="-1">Nginx和Jenkins聚集部署 <a class="header-anchor" href="#nginx和jenkins聚集部署" aria-label="Permalink to &quot;Nginx和Jenkins聚集部署&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker-compose.yml</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker-compose执行文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx.conf</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">       </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins挂载卷</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">webserver</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-static</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">              </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//存放前端打包后的dist文件</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">##### docker-compose.yml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">version:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">services:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker_jenkins:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">user:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">root</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">restart:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">image:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">container_name:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">ports:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">8080</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">50000</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">:50000</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">volumes:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker_nginx:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">restart:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">image:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">container_name:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">ports:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">8090</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">80</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">433</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">:433</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">volumes:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/webserver/static/jenkins/dist/dist:/usr/share/nginx/html</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">##### nginx.conf</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">server</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">listen</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">80</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">root</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/share/nginx/html</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">index</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">index.html</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">index.htm</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker-compose.yml</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker-compose执行文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx.conf</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">       </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins挂载卷</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">webserver</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-static</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">              </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//存放前端打包后的dist文件</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">##### docker-compose.yml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">version:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">services:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker_jenkins:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">user:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">root</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">restart:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">image:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">container_name:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">ports:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">8080</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">50000</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">:50000</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">volumes:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker_nginx:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">restart:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">image:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">container_name:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">ports:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">8090</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">80</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">433</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">:433</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">volumes:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/webserver/static/jenkins/dist/dist:/usr/share/nginx/html</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">##### nginx.conf</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">server</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">listen</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">80</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">root</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/share/nginx/html</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">index</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">index.html</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">index.htm</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><ul><li>启动</li></ul><p>docker-compose up -d<br> docker-compose stop //停止nginx和jenkins 两者结合可以进行重启</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/CICD/docker-jenkins.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const dockerJenkins = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  dockerJenkins as default
};
