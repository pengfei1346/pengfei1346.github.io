import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"webpack相关","description":"","frontmatter":{"isTimeLine":true,"title":"webpack相关","date":"2021-11-21T00:00:00.000Z","tags":["工程化","webpack"]},"headers":[],"relativePath":"interview/questions/webpack.md","filePath":"interview/questions/webpack.md","lastUpdated":1706150486000}');
const _sfc_main = { name: "interview/questions/webpack.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="webpack相关" tabindex="-1">webpack相关 <a class="header-anchor" href="#webpack相关" aria-label="Permalink to &quot;webpack相关&quot;">​</a></h1><h2 id="webpack是什么-有什么作用" tabindex="-1">webpack是什么？有什么作用？ <a class="header-anchor" href="#webpack是什么-有什么作用" aria-label="Permalink to &quot;webpack是什么？有什么作用？&quot;">​</a></h2><p>基于tapalble 的微内核打包工具。用来打包 js和 css。</p><h2 id="webpack有哪几部分" tabindex="-1">webpack有哪几部分？ <a class="header-anchor" href="#webpack有哪几部分" aria-label="Permalink to &quot;webpack有哪几部分？&quot;">​</a></h2><p>entry 、 output 、 loader 、 plugin</p><h2 id="有哪些常见的loader-你用过哪些loader" tabindex="-1">有哪些常见的Loader？你用过哪些Loader？ <a class="header-anchor" href="#有哪些常见的loader-你用过哪些loader" aria-label="Permalink to &quot;有哪些常见的Loader？你用过哪些Loader？&quot;">​</a></h2><ul><li>raw-loader：加载文件原始内容（utf-8）</li><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</li><li>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</li><li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li><li>svg-inline-loader：将压缩后的 SVG 内容注入代码中</li><li>image-loader：加载并且压缩图片文件</li><li>json-loader 加载 JSON 文件（默认包含）</li><li>handlebars-loader: 将 Handlebars 模版编译成函数并返回</li><li>babel-loader：把 ES6 转换成 ES5</li><li>ts-loader: 将 TypeScript 转换成 JavaScript</li><li>awesome-typescript-loader：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</li><li>sass-loader：将SCSS/SASS代码转换成CSS</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li><li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</li><li>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li><li>tslint-loader：通过 TSLint检查 TypeScript 代码</li><li>mocha-loader：加载 Mocha 测试用例的代码</li><li>coverjs-loader：计算测试的覆盖率</li><li>vue-loader：加载 Vue.js 单文件组件</li><li>i18n-loader: 国际化</li><li>cache-loader: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</li><li>更多 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Floaders%2F" target="_blank" rel="noreferrer">https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Floaders%2F</a></li></ul><h2 id="有哪些常见的plugin-你用过哪些plugin" tabindex="-1">有哪些常见的Plugin？你用过哪些Plugin？ <a class="header-anchor" href="#有哪些常见的plugin-你用过哪些plugin" aria-label="Permalink to &quot;有哪些常见的Plugin？你用过哪些Plugin？&quot;">​</a></h2><ul><li>define-plugin：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</li><li>ignore-plugin：忽略部分文件</li><li>html-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)</li><li>web-webpack-plugin：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</li><li>uglifyjs-webpack-plugin：不支持 ES6 压缩 (Webpack4 以前)</li><li>terser-webpack-plugin: 支持压缩 ES6 (Webpack4)</li><li>webpack-parallel-uglify-plugin: 多进程执行代码压缩，提升构建速度</li><li>mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</li><li>serviceworker-webpack-plugin：为网页应用增加离线缓存功能</li><li>clean-webpack-plugin: 目录清理</li><li>ModuleConcatenationPlugin: 开启 Scope Hoisting</li><li>speed-measure-webpack-plugin: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</li><li>webpack-bundle-analyzer: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</li></ul><h2 id="loader和plugin的区别" tabindex="-1">Loader和Plugin的区别？ <a class="header-anchor" href="#loader和plugin的区别" aria-label="Permalink to &quot;Loader和Plugin的区别？&quot;">​</a></h2><p>Loader 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</p><p>Plugin 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><p>Loader 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件) 、loader、options (参数)等属性。</p><p>Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。</p><h2 id="webpack构建流程" tabindex="-1">Webpack构建流程 <a class="header-anchor" href="#webpack构建流程" aria-label="Permalink to &quot;Webpack构建流程&quot;">​</a></h2><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><ul><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li><li>确定入口：根据配置中的 entry 找出所有的入口文件</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ul><p>Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p><p>简单说</p><ul><li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler</li><li>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理</li><li>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中</li></ul><h2 id="哪些可以提高效率的插件" tabindex="-1">哪些可以提高效率的插件？ <a class="header-anchor" href="#哪些可以提高效率的插件" aria-label="Permalink to &quot;哪些可以提高效率的插件？&quot;">​</a></h2><ul><li>webpack-dashboard：可以更友好的展示相关打包信息。</li><li>webpack-merge：提取公共配置，减少重复配置代码</li><li>speed-measure-webpack-plugin：简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。</li><li>size-plugin：监控资源体积变化，尽早发现问题</li><li>HotModuleReplacementPlugin：模块热替换</li></ul><h2 id="source-map是什么-生产环境怎么用" tabindex="-1">source map是什么？生产环境怎么用？ <a class="header-anchor" href="#source-map是什么-生产环境怎么用" aria-label="Permalink to &quot;source map是什么？生产环境怎么用？&quot;">​</a></h2><p>source map 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。 map文件只要不打开开发者工具，浏览器是不会加载的。 线上环境一般有三种处理方案：</p><ul><li>hidden-source-map：借助第三方错误监控平台 Sentry 使用</li><li>nosources-source-map：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</li><li>sourcemap：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)</li></ul><p>注意：避免在生产中使用 inline- 和 eval-，因为它们会增加 bundle 体积大小，并降低整体性能。</p><h2 id="webpack-的热更新原理" tabindex="-1">Webpack 的热更新原理 <a class="header-anchor" href="#webpack-的热更新原理" aria-label="Permalink to &quot;Webpack 的热更新原理&quot;">​</a></h2><p>Webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p>HMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。</p><p>后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。</p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F30669007" target="_blank" rel="noreferrer">https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F30669007</a></p><h2 id="如何对bundle体积进行监控和分析" tabindex="-1">如何对bundle体积进行监控和分析？ <a class="header-anchor" href="#如何对bundle体积进行监控和分析" aria-label="Permalink to &quot;如何对bundle体积进行监控和分析？&quot;">​</a></h2><p>VSCode 中有一个插件 Import Cost 可以帮助我们对引入模块的大小进行实时监测，还可以使用 webpack-bundle-analyzer 生成 bundle 的模块组成图，显示所占体积。 bundlesize 工具包可以进行自动化资源体积监控。</p><h2 id="文件指纹是什么-怎么用" tabindex="-1">文件指纹是什么？怎么用？ <a class="header-anchor" href="#文件指纹是什么-怎么用" aria-label="Permalink to &quot;文件指纹是什么？怎么用？&quot;">​</a></h2><p>文件指纹是打包后输出的文件名的后缀。</p><ul><li>Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li><li>Chunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash</li><li>Contenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li></ul><p><strong>占位符名称及含义</strong></p><ul><li>ext 资源后缀名</li><li>name 文件名称</li><li>path 文件的相对路径</li><li>folder 文件所在的文件夹</li><li>contenthash 文件的内容hash，默认是md5生成</li><li>hash，文件内容的hash，默认是md5生成</li><li>emoji 一个随机的指代文件内容的emoj</li></ul><h2 id="在实际工程中-配置文件上百行乃是常事-如何保证各个loader按照预想方式工作" tabindex="-1">在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？ <a class="header-anchor" href="#在实际工程中-配置文件上百行乃是常事-如何保证各个loader按照预想方式工作" aria-label="Permalink to &quot;在实际工程中，配置文件上百行乃是常事，如何保证各个loader按照预想方式工作？&quot;">​</a></h2><p>可以使用 enforce 强制执行 loader 的作用顺序，pre 代表在所有正常 loader 之前执行，post 是所有 loader 之后执行。(inline 官方不推荐使用)</p><h2 id="如何优化-webpack-的构建速度" tabindex="-1">如何优化 Webpack 的构建速度？ <a class="header-anchor" href="#如何优化-webpack-的构建速度" aria-label="Permalink to &quot;如何优化 Webpack 的构建速度？&quot;">​</a></h2><ul><li><p>使用高版本的 Webpack 和 Node.js</p></li><li><p>多进程/多实例构建：HappyPack(不维护了)、thread-loader</p></li><li><p>压缩代码</p><ul><li>多进程并行压缩 <ul><li>webpack-paralle-uglify-plugin</li><li>uglifyjs-webpack-plugin 开启 parallel 参数 (不支持ES6)terser-webpack-plugin 开启 parallel 参数</li><li>通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS。</li></ul></li></ul></li><li><p>图片压缩</p><ul><li>使用基于 Node 库的 imagemin (很多定制选项、可以处理多种图片格式)</li><li>配置 image-webpack-loader</li></ul></li><li><p>缩小打包作用域</p><ul><li>exclude/include (确定 loader 规则范围)</li><li>resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)</li><li>resolve.mainFields 只采用 main 字段作为入口文件描述字段 ( 减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)</li><li>resolve.extensions 尽可能减少后缀尝试的可能性</li><li>noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)</li><li>IgnorePlugin (完全排除模块)</li><li>合理使用alias</li></ul></li><li><p>提取页面公共资源</p><ul><li>基础包分离 <ul><li>使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中</li><li>使用 SplitChunksPlugin 进行(公共脚本、基础包、页面公共文件)分离(Webpack4内置) ，替代了 CommonsChunkPlugin 插件</li></ul></li></ul></li><li><p>DLL</p><ul><li>使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。</li><li>HashedModuleIdsPlugin 可以解决模块数字id问题</li></ul></li><li><p>充分利用缓存提升二次构建速度</p><ul><li>babel-loader 开启缓存</li><li>terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin</li></ul></li><li><p>Tree shaking</p><ul><li>打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的bundle中去掉(只能对ES6 Modlue生效) 开发中尽可能使用ES6 Module的模块，提高tree shaking效率</li><li>禁用 babel-loader 的模块依赖解析，否则 Webpack 接收到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking</li><li>使用 PurifyCSS(不在维护) 或者 uncss 去除无用 CSS 代码 <ul><li>purgecss-webpack-plugin 和 mini-css-extract-plugin配合使用(建议)</li></ul></li></ul></li><li><p>Scope hoisting</p><ul><li>构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突</li><li>必须是ES6的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hoisting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的ES6模块化语法</li></ul></li><li><p>动态Polyfill</p><ul><li>建议采用 polyfill-service 只给用户返回需要的polyfill，社区维护。 (部分国内奇葩浏览器UA可能无法识别，但可以降级返回所需全部polyfill)</li></ul></li></ul><h2 id="是否写过loader-简单描述一下编写loader的思路" tabindex="-1">是否写过Loader？简单描述一下编写loader的思路 <a class="header-anchor" href="#是否写过loader-简单描述一下编写loader的思路" aria-label="Permalink to &quot;是否写过Loader？简单描述一下编写loader的思路&quot;">​</a></h2><ul><li>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</li><li>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据</li><li>尽可能的异步化 Loader，如果计算量很小，同步也可以</li><li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li><li>使用 loader-utils 和 schema-utils 为我们提供的实用工具</li><li>加载本地 Loader 方法 <ul><li>Npm link</li><li>ResolveLoader</li></ul></li></ul><h2 id="是否写过plugin-简单描述一下编写plugin的思路" tabindex="-1">是否写过Plugin？简单描述一下编写Plugin的思路？ <a class="header-anchor" href="#是否写过plugin-简单描述一下编写plugin的思路" aria-label="Permalink to &quot;是否写过Plugin？简单描述一下编写Plugin的思路？&quot;">​</a></h2><p>webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。</p><ul><li>compiler 暴露了和 Webpack 整个生命周期相关的钩子</li><li>compilation 暴露了与模块和依赖有关的粒度更小的事件</li><li>钩子插件需要在其原型上绑定apply方法，才能访问 compiler 实例</li><li>传给每个插件的 compiler 和 compilation对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件</li><li>找出合适的事件点去完成想要的功能 <ul><li>emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(<strong>emit 事件是修改 Webpack 输出资源的最后时机</strong>)</li><li>watch-run 当依赖的文件发生变化时会触发</li></ul></li><li>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住</li></ul><h2 id="babel原理" tabindex="-1">Babel原理 <a class="header-anchor" href="#babel原理" aria-label="Permalink to &quot;Babel原理&quot;">​</a></h2><p>Babel大概分为三大部分：</p><ul><li>解析：将代码转换成 AST <ul><li>词法分析：将代码(字符串)分割为token流，即语法单元成的数组</li><li>语法分析：分析token流(上面生成的数组)并生成 AST</li></ul></li><li>转换：访问 AST 的节点进行变换操作生产新的 AST <ul><li>Taro就是利用 babel 完成的小程序语法转换</li></ul></li><li>生成：以新的 AST 为基础生成代码</li></ul><h2 id="webpack-4-和5-有哪些区别" tabindex="-1">webpack 4 和5 有哪些区别？ <a class="header-anchor" href="#webpack-4-和5-有哪些区别" aria-label="Permalink to &quot;webpack 4 和5 有哪些区别？&quot;">​</a></h2><h2 id="webpack5-模块联邦" tabindex="-1">webpack5 模块联邦？ <a class="header-anchor" href="#webpack5-模块联邦" aria-label="Permalink to &quot;webpack5 模块联邦？&quot;">​</a></h2><h2 id="问-webpack-配置中用过哪些-loader-都有什么作用" tabindex="-1">问：Webpack 配置中用过哪些 Loader ？都有什么作用？ <a class="header-anchor" href="#问-webpack-配置中用过哪些-loader-都有什么作用" aria-label="Permalink to &quot;问：Webpack 配置中用过哪些 Loader ？都有什么作用？&quot;">​</a></h2><h2 id="问-webpack-配置中用过哪些-plugin-都有什么作用" tabindex="-1">问：Webpack 配置中用过哪些 Plugin ？都有什么作用？ <a class="header-anchor" href="#问-webpack-配置中用过哪些-plugin-都有什么作用" aria-label="Permalink to &quot;问：Webpack 配置中用过哪些 Plugin ？都有什么作用？&quot;">​</a></h2><h2 id="问-loader-和-plugin-有什么区别" tabindex="-1">问：Loader 和 Plugin 有什么区别？ <a class="header-anchor" href="#问-loader-和-plugin-有什么区别" aria-label="Permalink to &quot;问：Loader 和 Plugin 有什么区别？&quot;">​</a></h2><p>Loader 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。</p><p>因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。</p><p>Plugin 就是插件，基于事件流框架 Tapable，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><p>Loader 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。</p><p>Plugin 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。</p><h2 id="问-如何编写-loader-介绍一下思路" tabindex="-1">问：如何编写 Loader ? 介绍一下思路？ <a class="header-anchor" href="#问-如何编写-loader-介绍一下思路" aria-label="Permalink to &quot;问：如何编写 Loader ? 介绍一下思路？&quot;">​</a></h2><h2 id="问-如何编写-plugin-介绍一下思路" tabindex="-1">问：如何编写 Plugin ? 介绍一下思路？ <a class="header-anchor" href="#问-如何编写-plugin-介绍一下思路" aria-label="Permalink to &quot;问：如何编写 Plugin ? 介绍一下思路？&quot;">​</a></h2><h2 id="问-webpack-optimize-有配置过吗-可以简单说说吗" tabindex="-1">问：Webpack optimize 有配置过吗？可以简单说说吗？ <a class="header-anchor" href="#问-webpack-optimize-有配置过吗-可以简单说说吗" aria-label="Permalink to &quot;问：Webpack optimize 有配置过吗？可以简单说说吗？&quot;">​</a></h2><h2 id="问-webpack-层面如何性能优化" tabindex="-1">问：Webpack 层面如何性能优化？ <a class="header-anchor" href="#问-webpack-层面如何性能优化" aria-label="Permalink to &quot;问：Webpack 层面如何性能优化？&quot;">​</a></h2><h2 id="问-webpack-打包流程是怎样的" tabindex="-1">问：Webpack 打包流程是怎样的？ <a class="header-anchor" href="#问-webpack-打包流程是怎样的" aria-label="Permalink to &quot;问：Webpack 打包流程是怎样的？&quot;">​</a></h2><h2 id="问-tree-shaking-实现原理是怎样的" tabindex="-1">问：tree-shaking 实现原理是怎样的？ <a class="header-anchor" href="#问-tree-shaking-实现原理是怎样的" aria-label="Permalink to &quot;问：tree-shaking 实现原理是怎样的？&quot;">​</a></h2><h2 id="问-webpack-热更新-hmr-是如何实现" tabindex="-1">问：Webpack 热更新（HMR）是如何实现？ <a class="header-anchor" href="#问-webpack-热更新-hmr-是如何实现" aria-label="Permalink to &quot;问：Webpack 热更新（HMR）是如何实现？&quot;">​</a></h2><h2 id="问-webpack-打包中-babel-插件是如何工作的" tabindex="-1">问：Webpack 打包中 Babel 插件是如何工作的？ <a class="header-anchor" href="#问-webpack-打包中-babel-插件是如何工作的" aria-label="Permalink to &quot;问：Webpack 打包中 Babel 插件是如何工作的？&quot;">​</a></h2><h2 id="问-webpack-和-rollup-有什么相同点与不同点" tabindex="-1">问：Webpack 和 Rollup 有什么相同点与不同点？ <a class="header-anchor" href="#问-webpack-和-rollup-有什么相同点与不同点" aria-label="Permalink to &quot;问：Webpack 和 Rollup 有什么相同点与不同点？&quot;">​</a></h2><h2 id="问-webpack5-更新了哪些新特性" tabindex="-1">问：Webpack5 更新了哪些新特性？ <a class="header-anchor" href="#问-webpack5-更新了哪些新特性" aria-label="Permalink to &quot;问：Webpack5 更新了哪些新特性？&quot;">​</a></h2></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("interview/questions/webpack.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const webpack = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  webpack as default
};
