import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"字节js面试题","description":"","frontmatter":{"sidebar":null,"group":null,"title":"字节js面试题"},"headers":[],"relativePath":"interview/questions/字节js面试题.md","filePath":"interview/questions/字节js面试题.md","lastUpdated":1726714490000}');
const _sfc_main = { name: "interview/questions/字节js面试题.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="字节js面试题" tabindex="-1">字节js面试题 <a class="header-anchor" href="#字节js面试题" aria-label="Permalink to &quot;字节js面试题&quot;">​</a></h1><h2 id="面试题-如何让-var-a-b-a-1-b-2-解构赋值成功" tabindex="-1">面试题：如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？ <a class="header-anchor" href="#面试题-如何让-var-a-b-a-1-b-2-解构赋值成功" aria-label="Permalink to &quot;面试题：如何让 var [a, b] = {a: 1, b: 2} 解构赋值成功？&quot;">​</a></h2><h3 id="浏览器打印" tabindex="-1">浏览器打印 <a class="header-anchor" href="#浏览器打印" aria-label="Permalink to &quot;浏览器打印&quot;">​</a></h3><blockquote><p>这个错误是个类型错误，并且是对象有问题，因为对象是一个不具备迭代器属性的数据结构</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> [a, b] </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {a: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, b: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// TypeError: {(intermediate value)(intermediate value)} is not iterable</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">var</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> [a, b] </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {a: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, b: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">2</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// TypeError: {(intermediate value)(intermediate value)} is not iterable</span></span></code></pre></div><h3 id="解法" tabindex="-1">解法 <a class="header-anchor" href="#解法" aria-label="Permalink to &quot;解法&quot;">​</a></h3><p>给对象原型上增加一个迭代器方法，返回对象结构。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">Object</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">prototype</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[Symbol.iterator] </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用 Object.values(this) 方法获取对象的所有值，并返回这些值的迭代器对象</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> Object.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">values</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)[Symbol.iterator]()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">Object</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">prototype</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[Symbol.iterator] </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用 Object.values(this) 方法获取对象的所有值，并返回这些值的迭代器对象</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> Object.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">values</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)[Symbol.iterator]()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><h2 id="来源" tabindex="-1">来源 <a class="header-anchor" href="#来源" aria-label="Permalink to &quot;来源&quot;">​</a></h2><p><a href="https://juejin.cn/post/7346512120639340607?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">https://juejin.cn/post/7346512120639340607?utm_source=gold_browser_extension</a></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("interview/questions/字节js面试题.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const __js___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  __js___ as default
};
