import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"防抖和节流","description":"","frontmatter":{"sidebar":null,"group":null,"title":"防抖和节流","isTimeLine":true,"date":"11-10-2023"},"headers":[],"relativePath":"front/coding/防抖和节流.md","filePath":"front/coding/防抖和节流.md","lastUpdated":1701327138000}');
const _sfc_main = { name: "front/coding/防抖和节流.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="防抖和节流" tabindex="-1">防抖和节流 <a class="header-anchor" href="#防抖和节流" aria-label="Permalink to &quot;防抖和节流&quot;">​</a></h1><h2 id="什么是防抖" tabindex="-1">什么是防抖 <a class="header-anchor" href="#什么是防抖" aria-label="Permalink to &quot;什么是防抖&quot;">​</a></h2><p>假设你用手压住一个弹簧，那么弹簧不会弹起来，除非你松手。</p><p>防抖是触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间。适用于可以** 多次触发但触发只生效最后一次**的场景。</p><p>利用闭包，不管触发频率多高，在停止触发n秒后才会执行，如果重复触发，会清空之前的定时器，重新计时，直到最后一次n秒后执行</p><h3 id="常用场景" tabindex="-1">常用场景： <a class="header-anchor" href="#常用场景" aria-label="Permalink to &quot;常用场景：&quot;">​</a></h3><p>1、搜索框搜索输入。只需用户最后一次输入完，再发送请求；<br> 2、用户名、手机号、邮箱输入验证；<br> 3、浏览器窗口大小改变后，只需窗口调整完后，再执行resize事件中的代码，防止重复渲染。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 不考虑第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} delay - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {boolean} flag - 第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">debounce</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">func</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">delayg</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> () {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> args </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">arguments</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在time时间段内重复执行，会清空之前的定时器，然后重新计时</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">clearTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(timer)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            func.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">call</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }, delay)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 不考虑第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} delay - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} time - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {boolean} flag - 第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">debounce</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">fn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">time</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">flag</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> timer;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">args</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在time时间段内重复执行，会清空之前的定时器，然后重新计时</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&amp;&amp;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">clearTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(timer);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (flag </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&amp;&amp;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">!</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// flag为true 第一次默认执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            fn.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">apply</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            fn.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">apply</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }, time);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">fn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">a</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;执行:&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, a);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> debounceFn </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">debounce</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(fn, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">3000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">debounceFn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">debounceFn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">debounceFn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 先打印：执行: 1  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 3s后打印: 执行: 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 不考虑第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} delay - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {boolean} flag - 第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">debounce</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">func</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">delayg</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> () {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> args </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">arguments</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在time时间段内重复执行，会清空之前的定时器，然后重新计时</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">clearTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(timer)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            func.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">call</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }, delay)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 不考虑第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} delay - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} time - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {boolean} flag - 第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">debounce</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">fn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">time</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">flag</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> timer;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">args</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在time时间段内重复执行，会清空之前的定时器，然后重新计时</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&amp;&amp;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">clearTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(timer);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (flag </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&amp;&amp;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">!</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// flag为true 第一次默认执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            fn.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">apply</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            fn.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">apply</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }, time);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">fn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">a</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;执行:&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, a);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> debounceFn </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">debounce</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(fn, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">3000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">debounceFn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">debounceFn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">2</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">debounceFn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">3</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 先打印：执行: 1  </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 3s后打印: 执行: 3</span></span></code></pre></div><h2 id="什么是节流" tabindex="-1">什么是节流 <a class="header-anchor" href="#什么是节流" aria-label="Permalink to &quot;什么是节流&quot;">​</a></h2><p>当水龙头的水一直往下流，这十分的浪费水，所以我们可以把龙头关小一点，让水一滴一滴往下流，每隔一段时间掉下来一滴水。</p><p>节流是高频事件触发，但在n秒内只会执行一次，如果n秒内触发多次函数，只有一次生效，节流会<strong>稀释函数的执行频率</strong> 。触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用</p><p>利用闭包，不管触发频率多高，每隔一段时间内执行一次</p><h3 id="常用场景-1" tabindex="-1">常用场景： <a class="header-anchor" href="#常用场景-1" aria-label="Permalink to &quot;常用场景：&quot;">​</a></h3><p>1、输入框的联想，可以限定用户在输入时，只在每两秒钟响应一次联想。<br> 2、搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用，设置一个合适的时间间隔，有效减轻服务端压力。<br> 3、表单验证<br> 4、按钮提交事件。</p><p>面试版：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} time - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {boolean} flag - 第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">throttle</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">fn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">time</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">flag</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> timer;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">args</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// flag控制第一次是否立即执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (flag) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            fn.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">apply</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 第一次执行完后，flag变为false；否则以后每次都会执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            flag </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">false</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">!</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                fn.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">apply</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">clearTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(timer);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 每次执行完重置timer</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            }, time);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 测试</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">fn</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;fn&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> throttleFn </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">throttle</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(fn, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">3000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">setInterval</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(throttleFn, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">500</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 测试结果，一开始就打印&quot;fn&quot;, 以后每隔3s打印一次&quot;fn&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {function} fn - 需要防抖的函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {number} time - 多长时间执行一次</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> * @param {boolean} flag - 第一次是否执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"> */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">throttle</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">fn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">time</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">flag</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> timer;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">args</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// flag控制第一次是否立即执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (flag) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            fn.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">apply</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 第一次执行完后，flag变为false；否则以后每次都会执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            flag </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">false</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">!</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                fn.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">apply</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">clearTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(timer);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 每次执行完重置timer</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            }, time);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 测试</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">fn</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;fn&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> throttleFn </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">throttle</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(fn, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">3000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">setInterval</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(throttleFn, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">500</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 测试结果，一开始就打印&quot;fn&quot;, 以后每隔3s打印一次&quot;fn&quot;</span></span></code></pre></div><p>其他版本：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 时间戳版本 - 首节流</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  触发事件时立即执行，以后每过delay秒之后才执行一次，并且最后一次触发事件若不满足要求不会被执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">throttle1</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">func</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">delay</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 记录上一次调用的时间</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> prev </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> () {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 记录事件参数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> args </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">arguments</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> now </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">Date</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">().</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getTime</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">()</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (now </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> prev </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> delay) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            func.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">call</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            prev </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> now</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 定时器版本 - 尾节流</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//第一次触发时不会执行，而是在delay秒之后才执行，当最后一次停止触发后，还会再执行一次函数。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">throttle2</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">func</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">delay</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> () {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 记录事件参数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">let</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> args </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">arguments</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">!</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                func.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">apply</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                timer </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            })</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 时间戳版本 - 首节流</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  触发事件时立即执行，以后每过delay秒之后才执行一次，并且最后一次触发事件若不满足要求不会被执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">throttle1</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">func</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">delay</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 记录上一次调用的时间</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> prev </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> () {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 记录事件参数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> args </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">arguments</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> now </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">Date</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">().</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getTime</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">()</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (now </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> prev </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> delay) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            func.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">call</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            prev </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> now</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 定时器版本 - 尾节流</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//第一次触发时不会执行，而是在delay秒之后才执行，当最后一次停止触发后，还会再执行一次函数。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">throttle2</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">func</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">delay</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> () {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 记录事件参数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">let</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> args </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">arguments</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">!</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">timer) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                func.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">apply</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, args);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                timer </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            })</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/coding/防抖和节流.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _____ as default
};
