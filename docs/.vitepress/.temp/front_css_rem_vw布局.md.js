import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"rem+vw布局","description":"","frontmatter":{"isTimeLine":true,"title":"rem+vw布局","date":"2021-11-21T00:00:00.000Z","sidebar":null,"tags":["css"]},"headers":[],"relativePath":"front/css/rem+vw布局.md","filePath":"front/css/rem+vw布局.md","lastUpdated":1700532797000}');
const _sfc_main = { name: "front/css/rem+vw布局.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="rem-vw布局" tabindex="-1">rem+vw布局 <a class="header-anchor" href="#rem-vw布局" aria-label="Permalink to &quot;rem+vw布局&quot;">​</a></h1><h2 id="rem布局" tabindex="-1">rem布局 <a class="header-anchor" href="#rem布局" aria-label="Permalink to &quot;rem布局&quot;">​</a></h2><blockquote><p>等比缩放，rem作用于根元素字体大小</p><p>需要加视口</p></blockquote><p>缺点:</p><p>字体并不合适使用rem, 字体的大小和字体宽度，并不成线性关系，会出现随着屏幕的变大，字体变的越来越大，所以需要结合媒体查询来调整字体大小</p><p>html的font-size为75px 即 1rem=75px</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">html</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">font-size</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">75</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">px</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">width</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">rem</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">} </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  = div {width: 75px}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">html</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">font-size</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">75</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">px</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">width</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">rem</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">} </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  = div {width: 75px}</span></span></code></pre></div><p>js设置html的font-size</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">document.documentElement.style.fontSize </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.documentElement.clientWidth </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">10</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;px&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">document.documentElement.style.fontSize </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.documentElement.clientWidth </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">10</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;px&#39;</span></span></code></pre></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/css/rem+vw布局.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const rem_vw__ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  rem_vw__ as default
};
