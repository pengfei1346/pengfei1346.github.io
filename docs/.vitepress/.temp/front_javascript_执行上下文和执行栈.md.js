import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img_1.5fd10c2c.png";
const _imports_1 = "/assets/img.b0deb6b0.png";
const _imports_2 = "/assets/img.64ad4fed.png";
const _imports_3 = "/assets/img_1.6e087411.png";
const __pageData = JSON.parse('{"title":"执行上下文和执行栈","description":"","frontmatter":{"isTimeLine":true,"title":"执行上下文和执行栈","date":"2021-11-21T00:00:00.000Z","tags":["js基础"]},"headers":[],"relativePath":"front/javascript/执行上下文和执行栈.md","filePath":"front/javascript/执行上下文和执行栈.md","lastUpdated":1700532797000}');
const _sfc_main = { name: "front/javascript/执行上下文和执行栈.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="执行上下文和执行栈" tabindex="-1">执行上下文和执行栈 <a class="header-anchor" href="#执行上下文和执行栈" aria-label="Permalink to &quot;执行上下文和执行栈&quot;">​</a></h1><h2 id="什么是执行上下文" tabindex="-1">什么是执行上下文？ <a class="header-anchor" href="#什么是执行上下文" aria-label="Permalink to &quot;什么是执行上下文？&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903983438381069" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903983438381069</a></p><blockquote><p>JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”(执行上下文)</p><p>执行上下文： 指当前执行环境中的变量、函数声明、作用域链、this等信息</p><p>Javascript 代码都是在执行上下文中运行的</p></blockquote><p>三大重要属性 ---&gt; 变量对象、作用域链(Scope chain)、this</p><p><img${ssrRenderAttr("src", _imports_0)} alt="img_1.png"></p><p>特点: 也是js语言的特点</p><ol><li>单线程，只在主线程上运行；（因此需要异步、eventloop事件机制处理）</li><li>同步执行，从上向下按顺序执行；</li><li>全局上下文只有一个，也就是window对象；</li><li>函数执行上下文没有限制； 5 函数每调用一次就会产生一个新的执行上下文环境。</li></ol><p>类型：</p><ol><li>全局执行上下文, 只有一个，（浏览器环境下，为全局的 window 对象）</li><li>函数执行上下文，有无数个，只有在函数被调用时才会被创建，每次调用函数都会创建一个新的执行上下文，有无数个</li><li>Eval 函数执行上下文，js的eval函数执行其内部的代码会创建属于自己的执行上下文，很少用而且不建议使用</li></ol><h3 id="执行上下文生命周期" tabindex="-1">执行上下文生命周期 <a class="header-anchor" href="#执行上下文生命周期" aria-label="Permalink to &quot;执行上下文生命周期&quot;">​</a></h3><p>1）创建阶段</p><ul><li>生成变量对象 <ul><li>创建arguments</li><li>扫描函数声明</li><li>扫描变量声明</li></ul></li><li>建立作用域链</li><li>确定this的指向</li></ul><p>2）执行阶段</p><ul><li>变量赋值</li><li>函数的引用</li><li>执行其他代码</li></ul><p><img${ssrRenderAttr("src", _imports_1)} alt="img.png"></p><h3 id="变量对象" tabindex="-1">变量对象 <a class="header-anchor" href="#变量对象" aria-label="Permalink to &quot;变量对象&quot;">​</a></h3><blockquote><p>变量对象是与执行上下文相关的数据作用域，存储了上下文中定义的变量和函数声明</p></blockquote><ul><li>全局执行上下文的变量对象 <ul><li>在全局执行上下文中，变量对象就是全局对象。</li><li>在顶层js代码中，this指向全局对象，全局变量会作为该对象的属性来被查询。在浏览器中，window就是全局对象</li></ul></li><li>函数执行上下文的变量对象 <ul><li>函数上下文中，变量对象VO就是活动对象AO。 初始化时，带有arguments属性。<br> 函数代码分成两个阶段执行</li><li>进入执行上下文时，此时变量对象包括 <ul><li>形参</li><li>函数声明，会替换已有变量对象</li><li>变量声明，不会替换形参和函数</li></ul></li></ul></li><li>函数执行</li></ul><p><img${ssrRenderAttr("src", _imports_2)} alt="img.png"></p><h3 id="执行上下文栈" tabindex="-1">执行上下文栈 <a class="header-anchor" href="#执行上下文栈" aria-label="Permalink to &quot;执行上下文栈&quot;">​</a></h3><blockquote><p>执行上下文栈的作用是用来<strong>跟踪代码</strong>的，由于JS是单线程的，每次只能做一件事情，其他的事情会放在指定的上下文栈中排队等待执行。</p><p>使用递归的时候，因为栈可存放的函数是有限制的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈</p></blockquote><h4 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h4><ul><li>1）当 JS 引擎第一次遇到js脚本时，会创建一个全局的执行上下文并且压入当前执行栈</li><li>2）每当JS 引擎遇到一个函数调用，它会为该函数创建一个<strong>新的执行上下文</strong>并放入到栈顶中</li><li>3）当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文</li><li>4）一旦所有代码执行完毕，JS 引擎从当前栈中移除全局执行上下文</li></ul><p>例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getName</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">year</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getYear</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">();</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;Lynn&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">\`\${</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">name</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">} \${</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">year</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">} years old this year\`</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getYear</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">18</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getName</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">();</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 1. 首先创建了全局执行上下文，当前全局执行上下文处于活跃状态。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 2. 全局代码中有2个函数 getName 和 getYear，然后调用 getName 函数，JS引擎停止执行全局执行上下文，创建了新的函数执行上下文，且把该函数上下文放入执行上下文栈顶。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 3. getName 函数里又调用了 getYear 函数，此时暂停了 getName 的执行上下文，创建了 getYear 函数的新执行上下文，且把该函数执行上下文放入执行上下文栈顶。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 4. 当 getYear 函数执行完后，其执行上下文从栈顶出栈，回到了 getName 执行上下文中继续执行。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 5. 当 getName 执行完后，其执行上下文从栈顶出栈，回到了全局执行上下文中。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getName</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">year</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getYear</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">();</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;Lynn&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">\`\${</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">name</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">} \${</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">year</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">} years old this year\`</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getYear</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">18</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getName</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">();</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 1. 首先创建了全局执行上下文，当前全局执行上下文处于活跃状态。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 2. 全局代码中有2个函数 getName 和 getYear，然后调用 getName 函数，JS引擎停止执行全局执行上下文，创建了新的函数执行上下文，且把该函数上下文放入执行上下文栈顶。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 3. getName 函数里又调用了 getYear 函数，此时暂停了 getName 的执行上下文，创建了 getYear 函数的新执行上下文，且把该函数执行上下文放入执行上下文栈顶。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 4. 当 getYear 函数执行完后，其执行上下文从栈顶出栈，回到了 getName 执行上下文中继续执行。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 5. 当 getName 执行完后，其执行上下文从栈顶出栈，回到了全局执行上下文中。</span></span></code></pre></div><p><img${ssrRenderAttr("src", _imports_3)} alt="img_1.png"></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/javascript/执行上下文和执行栈.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _________ as default
};
