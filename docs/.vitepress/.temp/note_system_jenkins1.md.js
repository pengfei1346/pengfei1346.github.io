import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img.ac56a910.png";
const __pageData = JSON.parse('{"title":"jenkins搭建（一）","description":"","frontmatter":{"sidebar":null,"title":"jenkins搭建（一）","step":6,"isTimeLine":true,"date":"2020-09-14T00:00:00.000Z"},"headers":[],"relativePath":"note/system/jenkins1.md","filePath":"note/system/jenkins1.md","lastUpdated":1713774468000}');
const _sfc_main = { name: "note/system/jenkins1.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="jenkins搭建" tabindex="-1">jenkins搭建 <a class="header-anchor" href="#jenkins搭建" aria-label="Permalink to &quot;jenkins搭建&quot;">​</a></h1><h2 id="jenkins-简介" tabindex="-1">jenkins 简介 <a class="header-anchor" href="#jenkins-简介" aria-label="Permalink to &quot;jenkins 简介&quot;">​</a></h2><p>文档--<a href="https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/" target="_blank" rel="noreferrer">https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile/</a></p><h3 id="功能特点" tabindex="-1">功能特点 <a class="header-anchor" href="#功能特点" aria-label="Permalink to &quot;功能特点&quot;">​</a></h3><ul><li>开源免费</li><li>多平台支持（Windows/Linux/macOS）</li><li>主从分布式架构</li><li>提供Web可视化配置管理页面</li><li>安装配置简单</li><li>插件资源丰富</li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>集成svn/git客户端，实现源代码下载检出</li><li>集成maven/ant/gradle/npm等构建工具，实现源码编译打包单元测试</li><li>集成sonarqube对源代码进行质量检查（坏味道、复杂度、新增bug等）</li><li>集成SaltStack/Ansible实现自动化部署发布</li><li>集成Jmeter/Soar/Kubernetes/...</li><li>可以自定义插件或者脚本，通过Jenkins传参运行</li></ul><h2 id="gitlab-jenkins-docker自动化部署前端项目" tabindex="-1">gitlab+jenkins+docker自动化部署前端项目 <a class="header-anchor" href="#gitlab-jenkins-docker自动化部署前端项目" aria-label="Permalink to &quot;gitlab+jenkins+docker自动化部署前端项目&quot;">​</a></h2><p>由于公司已经自行部署gitlab和nginx，只需要部署jenkins即可。</p><p>1、背景</p><p>之前公司采用是本地打包部署的方式（本地打包上传服务器，ssh登入服务器进行reload），虽然都编写了sh脚本简化流程，但是本地打包的方式实在接受不了，一个是打包的时候占用电脑性能，另一个是本地环境不能修改，还有一个就是其他人（这个人有可能是后端或者测试）需要部署的情况下保持node环境一致，因此计划把本地打包修改为服务器打包。</p><p>2、</p><p><img${ssrRenderAttr("src", _imports_0)} alt="img.png"></p><h3 id="前期准备" tabindex="-1">前期准备 <a class="header-anchor" href="#前期准备" aria-label="Permalink to &quot;前期准备&quot;">​</a></h3><h4 id="docker-compose基本使用" tabindex="-1">docker-compose基本使用 <a class="header-anchor" href="#docker-compose基本使用" aria-label="Permalink to &quot;docker-compose基本使用&quot;">​</a></h4><p><strong>命令</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 后台构建</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-d</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--build</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 停止并删除构建</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">down</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 更多</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-h</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看帮助</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 创建并运行所有容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-d</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 创建并后台运行所有容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">ps</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 显示所用容器信息</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-f</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker-compose.yml</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-d</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定模板</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">down</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 停止并删除容器、网络、卷、镜像。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">rm</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 删除容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">rmi</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 删除</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">logs</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看容器输出日志</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">pull</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 拉取依赖镜像</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">dokcer-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                       </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 检查配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">dokcer-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-q</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 验证yaml配置文件是否正确，有问题才有输出</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">pause</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 暂停容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">unpause</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 恢复暂停</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启服务</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">start</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 启动服务</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">stop</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 停止服务</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 后台构建</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-d</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--build</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 停止并删除构建</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">down</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 更多</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-h</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看帮助</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 创建并运行所有容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-d</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 创建并后台运行所有容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">ps</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 显示所用容器信息</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-f</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker-compose.yml</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-d</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定模板</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">down</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 停止并删除容器、网络、卷、镜像。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">rm</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                           </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 删除容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">rmi</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 删除</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">logs</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看容器输出日志</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">pull</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 拉取依赖镜像</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">dokcer-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                       </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 检查配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">dokcer-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-q</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 验证yaml配置文件是否正确，有问题才有输出</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">pause</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 暂停容器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">unpause</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 恢复暂停</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启服务</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">start</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 启动服务</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">stop</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                         </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 停止服务</span></span></code></pre></div><p><strong>yml文件编写</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#第一层 版本号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">version</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;3&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#代表使用docker-compose项目的版本号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#第二层：services 服务配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">services</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">web</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">build</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#宿主机和容器的端口映射</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;5000:5000&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">.:/code</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">redis</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">     </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;redis:alpine&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 第三层 其他配置 网络、卷、全局规划</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#第一层 版本号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">version</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;3&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#代表使用docker-compose项目的版本号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#第二层：services 服务配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">services</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">web</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">build</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#宿主机和容器的端口映射</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;5000:5000&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">.:/code</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">redis</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">     </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;redis:alpine&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 第三层 其他配置 网络、卷、全局规划</span></span></code></pre></div><h3 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h3><p>目录参考</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker-compose.yml</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker-compose执行文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx.conf</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">       </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins挂载卷</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">webserver</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">-static</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">              </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">//存放前端打包后的dist文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker-compose.yml</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker-compose执行文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx.conf</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">       </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins挂载卷</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">webserver</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">-static</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">              </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">//存放前端打包后的dist文件</span></span></code></pre></div><p><strong>1、docker docker-compose</strong></p><p>服务器需要安装 docker、docker-compose。 服务器中安装的有yum，直接运行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">yum</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">install</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker-compose</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">yum</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">install</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker-compose</span></span></code></pre></div><p><strong>2、部署gitlab - 如果需要的话 并未实践，自行验证</strong></p><blockquote><p>gitlab部署最小需要4G内存</p></blockquote><p>docker-compose.yml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">web</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;gitlab/gitlab-ee:latest&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">hostname</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;192.168.xx.xx&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">environment</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">GITLAB_OMNIBUS_CONFIG</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">        external_url &#39;http://192.168.xx.xx:8090&#39;   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">        # Add any other gitlab.rb configuration here, each on its own line </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;8090:8090&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 将容器的数据拷贝存到主机中</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/srv/gitlab/config:/etc/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/srv/gitlab/logs:/var/log/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/srv/gitlab/data:/var/opt/gitlab&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">web</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;gitlab/gitlab-ee:latest&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">hostname</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;192.168.xx.xx&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">environment</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">GITLAB_OMNIBUS_CONFIG</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#032F62" })}">        external_url &#39;http://192.168.xx.xx:8090&#39;   </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#032F62" })}">        # Add any other gitlab.rb configuration here, each on its own line </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;8090:8090&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 将容器的数据拷贝存到主机中</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/srv/gitlab/config:/etc/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/srv/gitlab/logs:/var/log/gitlab&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/srv/gitlab/data:/var/opt/gitlab&#39;</span></span></code></pre></div><p><strong>3、部署dockerhub - 如果需要的话 并未实践，自行验证</strong></p><p>docker-compose.yml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;registry:2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">containers</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">dockerhub</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">		- </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;5000:5000&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">	</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">		- </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/home/dockerhub/data:/var/lib/registry&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;registry:2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">containers</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">dockerhub</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">		- </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;5000:5000&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">	</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">		- </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/home/dockerhub/data:/var/lib/registry&#39;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 由于Docker CLI客户端默认以HTTPS访问，而部署的registry并未提供HTTPS，因此，需要在pull镜像的Docker主机添加HTTP可信任：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">vi</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/etc/docker/daemon.json</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 每台需要访问私有镜像仓库的都要配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">&quot;insecure-registries&quot;</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">&quot;192.168.1.99:5000&quot;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 然后重新启动docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">daemon-reload</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> &amp;&amp; </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">docker</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 测试仓库是否ok</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">pull</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">tag</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">ubuntu</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">localhost:5000/ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">push</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">localhost:5000/ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看已上传的镜像</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">curl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">http://localhost:5000/v2/_catalog</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 由于Docker CLI客户端默认以HTTPS访问，而部署的registry并未提供HTTPS，因此，需要在pull镜像的Docker主机添加HTTP可信任：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">vi</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/etc/docker/daemon.json</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 每台需要访问私有镜像仓库的都要配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">&quot;insecure-registries&quot;</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">&quot;192.168.1.99:5000&quot;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 然后重新启动docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">daemon-reload</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> &amp;&amp; </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">systemctl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">docker</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 测试仓库是否ok</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">pull</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">tag</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">ubuntu</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">localhost:5000/ubuntu</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">push</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">localhost:5000/ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 查看已上传的镜像</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">curl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">http://localhost:5000/v2/_catalog</span></span></code></pre></div><p>4、部署 nginx - 如果需要的话</p><p>拉取镜像</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">pull</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">pull</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span></code></pre></div><p>docker-compose.yml</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">version</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">services</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">docker_nginx</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">80:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">433:433</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/webserver/static/jenkins/dist/:/usr/share/nginx/html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">version</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">services</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">docker_nginx</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">80:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">433:433</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/webserver/static/jenkins/dist/:/usr/share/nginx/html</span></span></code></pre></div><p>nginx - conf.d - nginx.conf</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">server{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">  listen  8080;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">  root /usr/share/nginx/html;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">  index index.html index.htm;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">server{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">  listen  8080;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">  root /usr/share/nginx/html;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">  index index.html index.htm;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">}</span></span></code></pre></div><p>5、部署 jenkins</p><blockquote><p>如果按照步骤部署完毕后访问不了的，先docker ps -a查看运行状态，运行状态正常的话看看是不是云服务器的端口有咩有放行。</p></blockquote><p>拉取镜像</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">pull</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins/jenkins:lts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">pull</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins/jenkins:lts</span></span></code></pre></div><p>创建 jenkins 的工作目录并赋予权限</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">mkdir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-p</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins_home</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">chown</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-R</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#把当前目录的拥有者赋值给uid 1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">mkdir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-p</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins_home</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">cd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">chown</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-R</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#把当前目录的拥有者赋值给uid 1000</span></span></code></pre></div><p>编写docker-compose.yml</p><p>单独部署jenkins</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># /home/jenkins 是自定义映射jenkins存放数据的目录，可以修改成自己需要的目录，docker的映射是为了让jenkins能使用宿主环境下的docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">version</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">services</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">docker_jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">user</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">root</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">8080:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">50000:50000</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># /home/jenkins 是自定义映射jenkins存放数据的目录，可以修改成自己需要的目录，docker的映射是为了让jenkins能使用宿主环境下的docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">version</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">services</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">docker_jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">user</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">root</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">8080:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">50000:50000</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span></code></pre></div><p>jenkins和nginx编写在一起</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># /home/jenkins 是自定义映射jenkins存放数据的目录，可以修改成自己需要的目录，docker的映射是为了让jenkins能使用宿主环境下的docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">version</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#85E89D" })}">services</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">docker_jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">user</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">root</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">8080:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">50000:50000</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">docker_nginx</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">restart</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">image</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">ports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">8090:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">80:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">433:433</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      - </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/webserver/static/jenkins/dist/dist:/usr/share/nginx/html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># /home/jenkins 是自定义映射jenkins存放数据的目录，可以修改成自己需要的目录，docker的映射是为了让jenkins能使用宿主环境下的docker</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">version</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;3&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#22863A" })}">services</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 集合</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">docker_jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">user</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">root</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 为了避免一些权限问题 在这我使用了root</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 重启方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins/jenkins:lts</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                 </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">jenkins</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 容器名称</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                     </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 对外暴露的端口定义</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">8080:8080</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">50000:50000</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:                                   </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 卷挂载路径</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins/jenkins_home/:/var/jenkins_home</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是我们一开始创建的目录挂载到容器内的jenkins_home目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/var/run/docker.sock:/var/run/docker.sock</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/bin/docker:/usr/bin/docker</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 这是为了我们可以在容器内使用docker命令</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/usr/local/bin/docker-compose:/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">docker_nginx</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">restart</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">always</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">image</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">container_name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">nginx</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">ports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">8090:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">80:80</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">433:433</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">volumes</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/nginx/conf.d/:/etc/nginx/conf.d</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      - </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/webserver/static/jenkins/dist/dist:/usr/share/nginx/html</span></span></code></pre></div><p>启动容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 后台启动服务，第一次或自动pull镜像，添加 -d 表示后台启动，可以添加这个参数用于后台启动</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">up</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 后台启动服务，第一次或自动pull镜像，添加 -d 表示后台启动，可以添加这个参数用于后台启动</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">docker-compose</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">up</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-d</span></span></code></pre></div><p>开放防火墙 8080 端口</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--zone=public</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--add-port=8080/tcp</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--permanent</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">-reload</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--zone=public</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--add-port=8080/tcp</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--permanent</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">firewall-cmd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">-reload</span></span></code></pre></div><p>修改插件中心下载源</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">vi</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/home/jenkins_home/hudson.model.UpdateCenter.xml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># hudson.model.UpdateCenter.xml</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;?</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">xml version=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;1.1&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> encoding=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;UTF-8&#39;</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">sites</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">id&gt;default&lt;/id&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">/site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">/sites</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">vi</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/home/jenkins_home/hudson.model.UpdateCenter.xml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># hudson.model.UpdateCenter.xml</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;?</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">xml version=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;1.1&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> encoding=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;UTF-8&#39;</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">sites</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">id&gt;default&lt;/id&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/url&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">/site&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">/sites</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&gt;</span></span></code></pre></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("note/system/jenkins1.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const jenkins1 = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  jenkins1 as default
};
