import { ssrRenderAttrs, ssrRenderAttr } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img_5.2f5d4dd4.png";
const _imports_1 = "/assets/img_6.25859d29.png";
const _imports_2 = "/assets/img_9.8ac8b5e5.png";
const _imports_3 = "/assets/img_7.d0c2ef58.png";
const _imports_4 = "/assets/img_8.4dc2a8b9.png";
const __pageData = JSON.parse('{"title":"前置知识-json schema","description":"","frontmatter":{"sidebar":null,"title":"前置知识-json schema","isTimeLine":true,"date":"2024-09-10T00:00:00.000Z","tags":null},"headers":[],"relativePath":"note/case/前置知识-json schema.md","filePath":"note/case/前置知识-json schema.md","lastUpdated":1726627788000}');
const _sfc_main = { name: "note/case/前置知识-json schema.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="json-schema" tabindex="-1">json schema <a class="header-anchor" href="#json-schema" aria-label="Permalink to &quot;json schema&quot;">​</a></h1><h2 id="什么是-schema" tabindex="-1">什么是 Schema？ <a class="header-anchor" href="#什么是-schema" aria-label="Permalink to &quot;什么是 Schema？&quot;">​</a></h2><p>JSON Schema 是用于验证 JSON 数据结构的强大工具，Schema可以理解为模式或者规则。</p><p>JSON Schema是一种用于描述JSON数据的规范，可以用来定义JSON数据对象的结构、格式和约束条件。通过JSON Schema，可以对JSON数据进行验证、校验和文档化，确保数据的正确性和完整性。</p><p>主要有以下作用：</p><ol><li>对现有的json数据格式进行描述（字段类型、内容长度、是否必须存在、取值示例等）；</li><li>是一个描述清晰、人机可读的文档；</li><li>自动测试、验证客户端提交的数据；</li></ol><p><a href="https://doc.yonyoucloud.com/doc/wiki/project/json/schema.html" target="_blank" rel="noreferrer">JSON Schema 规范(中文版)</a></p><h2 id="schema示例" tabindex="-1">Schema示例 <a class="header-anchor" href="#schema示例" aria-label="Permalink to &quot;Schema示例&quot;">​</a></h2><h3 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h3><p><img${ssrRenderAttr("src", _imports_0)} alt="img_5.png"></p><p>JSON Schema关键词</p><ul><li>$schema：该关键字声明该模式是根据标准的特定草案编写的，主要用于版本控制，可省略。</li><li>$id：该关键字定义模式的URI，可省略。</li><li>title和description：该JSON Schema的注释和描述信息，不会向验证的数据调节约束。</li><li>type：该关键字会定义JSON数据的第一个约束，比如是JSON对象还是数组。</li><li>properties:需要约束的属性，值的类型是type的值。</li></ul><blockquote><p>type：数据类型</p></blockquote><ul><li>string</li><li>number</li><li>integer</li><li>object</li><li>array</li><li>布尔值</li><li>null</li></ul><h2 id="json-schema-类型" tabindex="-1">Json schema 类型 <a class="header-anchor" href="#json-schema-类型" aria-label="Permalink to &quot;Json schema 类型&quot;">​</a></h2><h3 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h3><p><img${ssrRenderAttr("src", _imports_1)} alt="img_6.png"></p><p>关键字:type（限定类型）,properties(定义object的各个字段),required（限定必需字段）</p><ul><li>properties定义属性</li><li>required必需属性</li><li>maxProperties最大属性个数</li><li>minProperties最小属性个数</li><li>additionalProperties true or false or object</li></ul><h3 id="array" tabindex="-1">array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;array&quot;">​</a></h3><p><img${ssrRenderAttr("src", _imports_2)} alt="img_9.png"></p><p>array有三个单独的属性:items,minItems,uniqueItems</p><ul><li>items array 每个元素的类型.</li><li>minItems 约束属性，数组最小的元素个数</li><li>maxItems 约束属性，数组最大的元素个数</li><li>uniqueItems 约束属性，每个元素都不相同</li><li>additionalProperties 约束items的类型，不建议使用 示例</li><li>Dependencies属性依赖 用法</li></ul><h3 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h3><p><img${ssrRenderAttr("src", _imports_3)} alt="img_7.png"></p><ul><li>maxLength定义字符串的最大长度，&gt;=0.</li><li>minLength定义字符串的最小长度，&gt;=0</li><li>pattern用正则表达式约束字符串</li></ul><h3 id="integer" tabindex="-1">integer <a class="header-anchor" href="#integer" aria-label="Permalink to &quot;integer&quot;">​</a></h3><p>number 关键字可以描述整数数字。integer类型的约束有以下几个</p><ul><li>minimum最小值.</li><li>exclusiveMinimum如果存在 &quot;exclusiveMinimum&quot; 并且具有布尔值 true，如果它严格意义上大于 &quot;minimum&quot; 的值则实例有效。</li><li>maximum约束属性，最大值exclusiveMaximum如果存在 &quot;exclusiveMinimum&quot; 并且具有布尔值 true，如果它严格意义上小于 &quot;maximum&quot; 的值则实例有效。</li><li>multipleOf是某数的倍数，必须大于0的整数</li></ul><h3 id="number" tabindex="-1">number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;number&quot;">​</a></h3><p><img${ssrRenderAttr("src", _imports_4)} alt="img_8.png"></p><p>number 关键字可以描述任意长度，任意小数点的数字。</p><ul><li>minimum最小值.exclusiveMinimum如果存在 &quot;exclusiveMinimum&quot; 并且具有布尔值 true，如果它严格意义上大于 &quot;minimum&quot; 的值则实例有效。</li><li>maximum约束属性，最大值</li><li>exclusiveMaximum如果存在 &quot;exclusiveMinimum&quot; 并且具有布尔值 true，如果它严格意义上小于 &quot;maximum&quot; 的值则实例有效。</li></ul><h3 id="boolean" tabindex="-1">boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;boolean&quot;">​</a></h3><p>true or false</p><h3 id="enum" tabindex="-1">enum <a class="header-anchor" href="#enum" aria-label="Permalink to &quot;enum&quot;">​</a></h3><p>枚举类型</p><h3 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h3><p>常数</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("note/case/前置知识-json schema.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const ____Json_schema = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  ____Json_schema as default
};
