import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img.6399008e.png";
const _imports_1 = "/assets/img_1.127ac1bf.png";
const __pageData = JSON.parse('{"title":"stable diffusion部署","description":"","frontmatter":{"sidebar":null,"group":null,"title":"stable diffusion部署","date":"2023-12-10T00:00:00.000Z","sticky":1},"headers":[],"relativePath":"note/system/stable diffusion部署.md","filePath":"note/system/stable diffusion部署.md","lastUpdated":1714099986000}');
const _sfc_main = { name: "note/system/stable diffusion部署.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="stable-diffusion部署" tabindex="-1">stable diffusion部署 <a class="header-anchor" href="#stable-diffusion部署" aria-label="Permalink to &quot;stable diffusion部署&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近在看ai方面的知识，工具主要有 mj、sd、lora等，因为mj收费的原因，所以决定先本地部署一个sd试一下，这里记录一下本地部署的过程。</p><h2 id="sd本地部署" tabindex="-1">sd本地部署 <a class="header-anchor" href="#sd本地部署" aria-label="Permalink to &quot;sd本地部署&quot;">​</a></h2><p>本地部署比较吃电脑配置，有条件的也可以使用云服务器部署（网上有白嫖三个月的教程）。</p><p>我的电脑配置：</p><ul><li>win：1060显卡，6G显存，16G内存，一块521G的固态硬盘。</li><li>mac： <img${ssrRenderAttr("src", _imports_0)} alt="img.png"></li></ul><h3 id="安装教程" tabindex="-1">安装教程： <a class="header-anchor" href="#安装教程" aria-label="Permalink to &quot;安装教程：&quot;">​</a></h3><p>话不多说上链接，也可以根据我的笔记来。</p><p><strong>windows：</strong></p><ul><li><a href="https://blog.csdn.net/A2421417624/article/details/137766693" target="_blank" rel="noreferrer">Stable Diffusion 安装教程（附安装包）</a></li></ul><p><strong>mac：</strong> - 坑比较多，多参考了一些网上教程</p><ul><li><a href="https://zhuanlan.zhihu.com/p/652700145" target="_blank" rel="noreferrer">一学就会，Macpro本地部署 Stable Diffusion</a></li><li><a href="http://www.hnbyed.com/news/4875.html" target="_blank" rel="noreferrer">Mac一键本地部署sd</a></li><li><a href="https://blog.csdn.net/weixin_49720173/article/details/137225953" target="_blank" rel="noreferrer">SD教程- ! 清晰易懂 !</a></li></ul><h3 id="windows部署" tabindex="-1">windows部署 <a class="header-anchor" href="#windows部署" aria-label="Permalink to &quot;windows部署&quot;">​</a></h3><p>没有按照官网部署的教程，用了网上找的一个整合包（秋叶整合包），用整合包的原因还是觉得配置环境和模型太麻烦，比较喜欢傻瓜式安装，但是使用整合包后续升级可能不方便，可以自行取舍。</p><p>windows安装起来还是很顺利的，安装完成跑的速度也能接受（gtx1060显卡）。</p><h3 id="mac部署" tabindex="-1">mac部署 <a class="header-anchor" href="#mac部署" aria-label="Permalink to &quot;mac部署&quot;">​</a></h3><p><strong>1、安装homebrew</strong></p><p>这一步巨慢无比，午饭都吃完了还没更新完</p><p>brew安装&amp;更新慢：<a href="https://blog.csdn.net/itguangit/article/details/122192858" target="_blank" rel="noreferrer">更换国内镜像源</a></p><p><strong>2、执行以下命令来一次性安装所有必要的依赖：</strong></p><p>brew install cmake protobuf rust python@3.10 git wget</p><p><strong>3、安装Python</strong></p><p>有两种方式来安装Python，你可以根据自己的需求选择其中一种</p><hr><ul><li><strong>方式一：使用命令行直接安装</strong></li></ul><p>执行以下命令来一次性安装所有必要的依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">brew</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">install</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">cmake</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">protobuf</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">rust</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">python@3.10</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">git</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">wget</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">brew</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">install</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">cmake</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">protobuf</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">rust</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">python@3.10</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">git</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">wget</span></span></code></pre></div><hr><ul><li><strong>方式二：使用Anaconda来创建虚拟环境（推荐）</strong></li></ul><p>conda可以将各个环境隔离出来，库和包也互不影响</p><p><strong>安装conda</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">brew</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">install</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--cask</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">anaconda</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">brew</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">install</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--cask</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">anaconda</span></span></code></pre></div><blockquote><p>备注：这一步也巨慢无比，中间还报了一次443错误，果断从清华镜像源换成了中科大镜像源，虽然还是慢就是了</p><p>tip：源有可能也不能用，多换几个试一试</p></blockquote><p>出现这个说明成功了</p><p><img${ssrRenderAttr("src", _imports_1)} alt="img_1.png"></p><p><strong>配置环境变量， ~/.zshrc追加配置</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">echo</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;export PATH=&quot;/usr/local/anaconda3/bin:$PATH&quot; &#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">&gt;&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">~/.zshrc</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">source</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">~/.zshrc</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">conda</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">init</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">zsh</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">echo</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;export PATH=&quot;/usr/local/anaconda3/bin:$PATH&quot; &#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">&gt;&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">~/.zshrc</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">source</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">~/.zshrc</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">conda</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">init</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">zsh</span></span></code></pre></div><p><strong>创建一个名为 sdwebui 的虚拟环境，指定Python版本为3.10.6</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">conda</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">create</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">--name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">sdwebui</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">python=</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">3.10</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">.6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">conda</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">create</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">--name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">sdwebui</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">python=</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">3.10</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">.6</span></span></code></pre></div><p><strong>激活，进入SDWEBUI环境</strong></p><p>这里有个坑点：conda init之后需要重启终端</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">conda</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">activate</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">sdwebui</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">conda</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">activate</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">sdwebui</span></span></code></pre></div><p><strong>下载项目</strong> 首先，我们需要下载Stable-Diffusion-WebUI项目</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#下载项目文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">git</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">clone</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">#下载项目文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">git</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">clone</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</span></span></code></pre></div><p><strong>没想到clone步骤也有坑</strong></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">--报错：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">Cloning into &#39;stable-diffusion-webui&#39;...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">remote: Enumerating objects: 33138, done.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">remote: Counting objects: 100% (10/10), done.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">remote: Compressing objects: 100% (10/10), done.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">error: RPC failed; curl 18 HTTP/2 stream 5 was reset02.00 KiB/s</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">error: 8151 bytes of body are still expected</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">fetch-pack: unexpected disconnect while reading sideband packet</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">fatal: early EOF</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">fatal: fetch-pack: invalid index-pack output</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">---解决：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">git config --global http.postBuffer 524288000000</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">--报错：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">Cloning into &#39;stable-diffusion-webui&#39;...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">remote: Enumerating objects: 33138, done.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">remote: Counting objects: 100% (10/10), done.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">remote: Compressing objects: 100% (10/10), done.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">error: RPC failed; curl 18 HTTP/2 stream 5 was reset02.00 KiB/s</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">error: 8151 bytes of body are still expected</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">fetch-pack: unexpected disconnect while reading sideband packet</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">fatal: early EOF</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">fatal: fetch-pack: invalid index-pack output</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">---解决：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">git config --global http.postBuffer 524288000000</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 进入项目目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">stable-diffusion-webui</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 启动运行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">./webui.sh</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 进入项目目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">cd</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">stable-diffusion-webui</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}"># 启动运行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">./webui.sh</span></span></code></pre></div><p><strong>坑点</strong></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">**坑点1：**</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">env: bash\\r: No such file or directory</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"># 解决：因为文件格式问题</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">vi ./webui.sh</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"># 输入 esc -&gt; :</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">set ff=unix</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"># esc -&gt; : -&gt; wq</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">----</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">**坑点2：**</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">[notice] A new release of pip available: 22.2.1 -&gt; 24.0</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">[notice] To update, run: pip install --upgrade pip</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">Traceback (most recent call last):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">  File &quot;/Users/chenpengfei/Desktop/cpf/stable_diffusion/stable-diffusion-webui/launch.py&quot;, line 48, in &lt;module&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">    main()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">  File &quot;/Users/chenpengfei/Desktop/cpf/stable_diffusion/stable-diffusion-webui/launch.py&quot;, line 39, in main</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">    prepare_environment()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">  File &quot;/Users/chenpengfei/Desktop/cpf/stable_diffusion/stable-diffusion-webui/modules/launch_utils.py&quot;, line 386, in prepare_environment</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">    raise RuntimeError(</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">RuntimeError: Torch is not able to use GPU; add --skip-torch-cuda-test to COMMANDLINE_ARGS variable to disable this check</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"># 解决</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">vi webui-user.sh</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">修改为 export COMMANDLINE_ARGS=&quot;--skip-torch-cuda-test --no-half&quot;</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">**坑点1：**</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">env: bash\\r: No such file or directory</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"># 解决：因为文件格式问题</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">vi ./webui.sh</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"># 输入 esc -&gt; :</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">set ff=unix</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"># esc -&gt; : -&gt; wq</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">----</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">**坑点2：**</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">[notice] A new release of pip available: 22.2.1 -&gt; 24.0</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">[notice] To update, run: pip install --upgrade pip</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">Traceback (most recent call last):</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">  File &quot;/Users/chenpengfei/Desktop/cpf/stable_diffusion/stable-diffusion-webui/launch.py&quot;, line 48, in &lt;module&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">    main()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">  File &quot;/Users/chenpengfei/Desktop/cpf/stable_diffusion/stable-diffusion-webui/launch.py&quot;, line 39, in main</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">    prepare_environment()</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">  File &quot;/Users/chenpengfei/Desktop/cpf/stable_diffusion/stable-diffusion-webui/modules/launch_utils.py&quot;, line 386, in prepare_environment</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">    raise RuntimeError(</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">RuntimeError: Torch is not able to use GPU; add --skip-torch-cuda-test to COMMANDLINE_ARGS variable to disable this check</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"># 解决</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">vi webui-user.sh</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}"></span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">修改为 export COMMANDLINE_ARGS=&quot;--skip-torch-cuda-test --no-half&quot;</span></span></code></pre></div><hr><p><strong>安装成功</strong></p><p>在命令行窗口中，你将看到一个网址链接。将该链接（通常为<a href="http://127.0.0.1:7860" target="_blank" rel="noreferrer">http://127.0.0.1:7860</a>）复制到浏览器中，即可进入Stable Diffusion界面。</p><p>以后，每次使用Stable Diffusion时，只需找到之前保存的”stable-diffusion-webui”文件夹，然后运行”webui.sh”即可。</p><p>请注意，在使用过程中，不要关闭终端窗口，因为终端会输出相关信息。</p><p><strong>安装中文语言包</strong></p><p>要安装中文语言包，你可以选择以下两种方式：</p><p>方式一：通过WebUI拓展进行安装</p><ol><li>打开Stable Diffusion WebUI，并进入”Extensions”选项卡。</li><li>点击”Install from URL”，注意下方的”URL for extension’s git repository”输入框。</li><li>粘贴或输入中文语言包的Git仓库地址：<a href="https://github.com/VinsonLaro/stable-diffusion-webui-chinese" target="_blank" rel="noreferrer">https://github.com/VinsonLaro/stable-diffusion-webui-chinese</a></li><li>点击下方的黄色按钮”Install”完成安装，然后重新启动WebUI（点击”Install from URL”左侧的”Installed”，然后点击下方的黄色按钮”Apply and restart UI”，再点击页面底部的”Reload UI”）。</li><li>点击”Settings”，在左侧选择”User interface”界面，在最下方的”Localization (requires restart)”中，选择”Chinese-All”或”Chinese-English”。</li><li>点击界面顶部的黄色按钮”Apply settings”，然后再点击右侧的”Reload UI”即可完成中文汉化。</li></ol><p>方式二：直接复制翻译好的本地化模板</p><ol><li>在任意目录下执行以下命令：</li><li>git clone <a href="https://github.com/VinsonLaro/stable-diffusion-webui-chinese" target="_blank" rel="noreferrer">https://github.com/VinsonLaro/stable-diffusion-webui-chinese</a></li><li>进入下载好的文件夹，将”localizations”文件夹内的”Chinese-All.json”和”Chinese-English.json”复制到”stable-diffusion-webuilocalizations”目录下。</li><li>再次打开Stable Diffusion WebUI，点击”Settings”，在左侧选择”User interface”界面，在最下方的”Localization (requires restart)”中，选择”Chinese-All”或”Chinese-English”。</li><li>点击界面顶部的黄色按钮”Apply settings”，然后再点击右侧的”Reload UI”即可完成中文汉化。</li></ol><h3 id="更新-装到最后能跑-但是极其慢-也许是我电脑intel-iris-plus-graphics-650显卡太垃圾了-mac还是不折腾了-我老老实实windows或者云部署吧-也许mac显卡性能好的可以装一下玩玩" tabindex="-1">更新 ----- 装到最后能跑，但是极其慢，也许是我电脑intel iris plus graphics 650显卡太垃圾了，mac还是不折腾了，我老老实实windows或者云部署吧，也许mac显卡性能好的可以装一下玩玩 <a class="header-anchor" href="#更新-装到最后能跑-但是极其慢-也许是我电脑intel-iris-plus-graphics-650显卡太垃圾了-mac还是不折腾了-我老老实实windows或者云部署吧-也许mac显卡性能好的可以装一下玩玩" aria-label="Permalink to &quot;更新 ----- 装到最后能跑，但是极其慢，也许是我电脑intel iris plus graphics 650显卡太垃圾了，mac还是不折腾了，我老老实实windows或者云部署吧，也许mac显卡性能好的可以装一下玩玩&quot;">​</a></h3></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("note/system/stable diffusion部署.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const stable_diffusion__ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  stable_diffusion__ as default
};
