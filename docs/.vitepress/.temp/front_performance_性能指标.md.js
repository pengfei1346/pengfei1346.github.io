import { ssrRenderAttrs, ssrRenderStyle, ssrRenderAttr } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img_2.b82aa5cd.png";
const _imports_1 = "/assets/img_3.0aa53379.png";
const _imports_2 = "/assets/img_4.b13550a7.png";
const _imports_3 = "/assets/img_5.57bda73c.png";
const _imports_4 = "/assets/img_6.0c2348d2.png";
const __pageData = JSON.parse('{"title":"性能标准","description":"","frontmatter":{"sidebar":null,"group":null,"title":"性能标准","isTimeLine":true,"date":"11-10-2023"},"headers":[],"relativePath":"front/performance/性能指标.md","filePath":"front/performance/性能指标.md","lastUpdated":1701683271000}');
const _sfc_main = { name: "front/performance/性能指标.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="性能标准" tabindex="-1">性能标准 <a class="header-anchor" href="#性能标准" aria-label="Permalink to &quot;性能标准&quot;">​</a></h1><h2 id="评测工具" tabindex="-1">评测工具 <a class="header-anchor" href="#评测工具" aria-label="Permalink to &quot;评测工具&quot;">​</a></h2><p>工具 1,performance 2,lighthouse</p><h2 id="性能标准-1" tabindex="-1">性能标准 <a class="header-anchor" href="#性能标准-1" aria-label="Permalink to &quot;性能标准&quot;">​</a></h2><p>官方地址：(<a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/Performance</a>)</p><blockquote><p>performance很多方法 属性都废弃了，performance.toJSON() 返回的属性才是目前支持的</p></blockquote><blockquote><p>三大指标 ：LCP：最大内容绘制、FID：首次输入延迟、CLS：累计位移偏移</p><p><strong>LCP</strong> 代表了页面的速度指标，虽然还存在其他的一些体现速度的指标，但是上文也说过 LCP 能体现的东西更多一些。一是指标实时更新，数据更精确，二是代表着页面最大元素的渲染时间，通常来说页面中最大元素的快速载入能让用户感觉性能还挺好。</p><p><strong>FID</strong> 代表了页面的交互体验指标，毕竟没有一个用户希望触发交互以后页面的反馈很迟缓，交互响应的快会让用户觉得网页挺流畅。</p><p><strong>CLS</strong> 代表了页面的稳定指标，尤其在手机上这个指标更为重要。因为手机屏幕挺小，CLS 值一大的话会让用户觉得页面体验做的很差。</p></blockquote><ul><li><p>性能核心指标主要包括： <em><strong>白屏时间FP 、 首屏时间FCP、 页面完全加载时间L</strong></em>，以及新增的用户体验指标 <em><strong>LCP、 FID、 CLS</strong></em> 。</p></li><li><p>辅助性性能指标包括： DNS 解析 、请求响应时间、 DOM开始构建时间、 页面可交互时间、 DOM构建完成时间、 网络速度、 各类静态资源耗时、 ajax请求耗时、 LongTask 等等。</p></li></ul><hr><h2 id="渲染相关" tabindex="-1">渲染相关 <a class="header-anchor" href="#渲染相关" aria-label="Permalink to &quot;渲染相关&quot;">​</a></h2><h3 id="fp-first-paint-用来衡量白屏时间" tabindex="-1">FP （First Paint） - 用来衡量白屏时间 <a class="header-anchor" href="#fp-first-paint-用来衡量白屏时间" aria-label="Permalink to &quot;FP （First Paint） - 用来衡量白屏时间&quot;">​</a></h3><blockquote><p>FP 可以反映页面加载的整体速度。</p></blockquote><p>指页面的首次渲染的时间点。在完成首次渲染之前，用户看到的都是 没有任何内容的白色页面，也就是我们常说的 白屏时间。</p><h3 id="fcp-first-contentful-paint-首个内容绘制时间" tabindex="-1">FCP （First Contentful Paint） - 首个内容绘制时间 <a class="header-anchor" href="#fcp-first-contentful-paint-首个内容绘制时间" aria-label="Permalink to &quot;FCP （First Contentful Paint） - 首个内容绘制时间&quot;">​</a></h3><blockquote><p>FCP 反映了用户可以看到有意义的内容的时间。</p></blockquote><p>指页面的首个内容绘制时间，即浏览器在页面上绘制出第一块有实际内容的区域（如文本、图像等）的时间点。</p><p><strong>解释：</strong></p><p>在实际情况中，FP 和 FCP 这两个指标通常是紧挨着的</p><p>例子：</p><p>这个例子 FP和FCP差了3s</p><p>首先html从上往下解析，解析完后css那个link还没下载完，所以会阻塞页面渲染，但是实际这时候页面会先渲染link标签之上的内容，也就是一个空的P标签，背景色是红色，所以这时候就是FP时间</p><p>接下来css的加载会阻塞dom渲染，等待3s后才渲染了本文节点，满足了到达FCP的条件（达到FCP的条件之一是要渲染文本）。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">html</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">lang</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;en&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">head</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">meta</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">charset</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;UTF-8&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">meta</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">http-equiv</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;X-UA-Compatible&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">content</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;IE=edge&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">meta</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;viewport&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">content</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">title</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;Document&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">title</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">style</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">p</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">width</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">100</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">px</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">height</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">100</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">px</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">background-color</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">red</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">style</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">head</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">body</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">p</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">id</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;test&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">p</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">link</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">rel</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;stylesheet&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">href</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;./css/index.css?sleep=3000&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;123&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">body</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">html</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">html</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">lang</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;en&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">head</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">meta</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">charset</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;UTF-8&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">meta</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">http-equiv</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;X-UA-Compatible&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">content</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;IE=edge&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">meta</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;viewport&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">content</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">title</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;Document&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">title</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">style</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#22863A" })}">p</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">width</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">100</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">px</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">height</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">100</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">px</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">background-color</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">red</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">style</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">head</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">body</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">p</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">id</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;test&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">p</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">link</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">rel</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;stylesheet&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">href</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;./css/index.css?sleep=3000&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;123&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">body</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">html</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><h3 id="dcl-dom-content-loaded" tabindex="-1">DCL （DOM Content Loaded） <a class="header-anchor" href="#dcl-dom-content-loaded" aria-label="Permalink to &quot;DCL （DOM Content Loaded）&quot;">​</a></h3><blockquote><p>DCL 反映了页面的可交互性，表示页面已经准备好响应用户的操作。</p></blockquote><p>指当 HTML 文档被完全加载和解析后，DOM 树构建完成并且所有关联资源（如样式表、脚本等）已经下载完成，触发 DOMContentLoaded 事件的时间点。</p><h3 id="lcp-largest-contentful-paint-页面主要内容的加载完成时间-牛逼-2-5s-一般-4s-辣鸡" tabindex="-1">LCP （Largest Contentful Paint） - 页面主要内容的加载完成时间（牛逼 &lt; 2.5s &lt; 一般 &lt; 4s &lt; 辣鸡） <a class="header-anchor" href="#lcp-largest-contentful-paint-页面主要内容的加载完成时间-牛逼-2-5s-一般-4s-辣鸡" aria-label="Permalink to &quot;LCP （Largest Contentful Paint） -  页面主要内容的加载完成时间（牛逼 &lt; 2.5s &lt; 一般  &lt; 4s &lt; 辣鸡）&quot;">​</a></h3><blockquote><p>衡量页面加载速度的重要指标- 视口内可见的最大图片或文本块的呈现时间</p><p>最大内容绘制 (LCP) 指标会根据页面首次开始加载的时间点来报告可视区域内可见的最大图像或者文本块完成渲染的相对时间。</p></blockquote><p>指页面上最大的一个可见元素（如图片、文本等）绘制完成的时间点。</p><p>注意，最大元素随着页面渲染，是会变化的。还是从拿一张图说明，最大的元素一开始是文字，后面又变成了图片。</p><p><img${ssrRenderAttr("src", _imports_0)} alt="img_2.png"></p><p>如果在渲染过程中，判断了一个元素是最大元素，然后通过js又删除了这个元素，如果后面没有更大的元素符合条件，那么最大的元素还是被删除的元素。 <img${ssrRenderAttr("src", _imports_1)} alt="img_3.png"> 如果渲染过程中又插入了一个更大的元素，那么LCP也会改变。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">// setTimeout的形式 或者在script标签前加link下载css阻塞</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">body</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">class</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;div1&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;div&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">script</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">ele</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;div&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ele.className </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;div2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ele.innerText </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;div2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        document.body.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(ele)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      }, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">2000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">script</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">body</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">// setTimeout的形式 或者在script标签前加link下载css阻塞</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">body</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">class</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;div1&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;div&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">script</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">setTimeout</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">ele</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;div&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ele.className </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;div2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ele.innerText </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;div2&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        document.body.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(ele)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      }, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">2000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">script</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">body</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><p><img${ssrRenderAttr("src", _imports_2)} alt="img_4.png"> 但是一旦和页面发生交互，那么LCP将不再更新。如下图所示，新增了一个按钮，如果渲染红色方块前点击了按钮，那么LCP将停止更新。 <img${ssrRenderAttr("src", _imports_3)} alt="img_5.png"></p><ul><li><p>哪些元素会影响 LCP 的值？<br> 文本相关的元素或节点、图片相关的元素，包括<img>元素、通过url()加载的背景图片等。</p></li><li><p>关于元素的大小：<br> LCP 仅考虑用户看得到的部分。例如，一个元素有部分内容是在视口之外，这些部分不会计入元素的大小。对于图片元素，如果是缩小其原始大小，则以显示时的大小为准；如果是拉伸其尺寸，则以其原始大小为准。 对于所有元素，不考虑通过 CSS 添加的任何外边距、内边距或边框。</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// f12 console输入获取 LCP 值</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">PerformanceObserver</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">((</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">entryList</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">for</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">entry</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">of</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> entryList.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getEntries</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">()) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;LCP candidate:&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, entry.startTime, entry);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}).</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">observe</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({type: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;largest-contentful-paint&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, buffered: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// f12 console输入获取 LCP 值</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">PerformanceObserver</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">((</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">entryList</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">for</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">entry</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">of</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> entryList.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getEntries</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">()) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;LCP candidate:&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, entry.startTime, entry);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}).</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">observe</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({type: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;largest-contentful-paint&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, buffered: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">});</span></span></code></pre></div><hr><h2 id="交互的响应度" tabindex="-1">交互的响应度 <a class="header-anchor" href="#交互的响应度" aria-label="Permalink to &quot;交互的响应度&quot;">​</a></h2><h3 id="fid-first-input-delay-首次输入延迟-牛逼-100ms-一般-300ms-辣鸡" tabindex="-1">FID(First Input Delay) - 首次输入延迟 （牛逼 &lt; 100ms &lt; 一般 &lt; 300ms &lt; 辣鸡） <a class="header-anchor" href="#fid-first-input-delay-首次输入延迟-牛逼-100ms-一般-300ms-辣鸡" aria-label="Permalink to &quot;FID(First Input Delay) - 首次输入延迟 （牛逼 &lt; 100ms &lt; 一般  &lt; 300ms &lt; 辣鸡）&quot;">​</a></h3><blockquote><p>用户首次与网页互动 （如点击） 到浏览器实际开始处理脚本，以响应该互动的时间。</p><p>FID 测量从用户第一次与页面交互（例如当他们单击链接、点按按钮或使用由 JavaScript 驱动的自定义控件）直到浏览器对交互作出响应，并实际能够开始处理事件处理程序所经过的时间。</p></blockquote><p>例子</p><p>浏览器解析到script标签，便会停止解析直到js脚本下载并执行完。</p><p>这段阻塞期，浏览器会先渲染一遍已经解析好的内容，所以页面会看到一个input框，当js下载完后，主线程一直在执行js（内容是一个耗时很久的for循环）</p><p>等待js执行完的那一段时间，就是用户感受的<strong>FID值</strong>。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">body</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">class</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;div1&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;div div&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">input</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">type</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;text&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">script</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">src</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;./js/index.js?sleep=2000&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">script</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">class</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;div2&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;div&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">div</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- &lt;img src=&quot;./img/100px.png&quot; alt=&quot;&quot; /&gt; --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">body</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">body</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">class</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;div1&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;div div&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">input</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">type</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;text&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">script</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">src</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;./js/index.js?sleep=2000&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">script</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">class</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;div2&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;div&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">div</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- &lt;img src=&quot;./img/100px.png&quot; alt=&quot;&quot; /&gt; --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">body</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><p>FID 通常发生在 FCP 和 TTI 之间。Time to Interactive (TTI): 从网页开始加载 到主要子资源已加载 且能够快速可靠地响应用户输入的时间。 我们都知道，JavaScript 引擎是单线程的。如上图所示，在 JavaScript 文件下载完成后，会在主线程开始处理，这会导致主线程处理忙碌状态。假设用户在耗时最长的任务途中忽然开始于网页交互，那么他必须等到该任务处理完成后，浏览器才能响应该次交互。这个时间差是用户必须等待的时间，即 FID。</p><blockquote><p>除了事件监听函数，有些 HTML 元素也需要等到主线程任务完成后才能响应用户互动，包括&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;和&lt;a&gt;。</p></blockquote><blockquote><p>FID 仅仅测量的是 延迟时间，不包括这个事件处理本身需要的时间和事件处理后浏览器更新界面的时间。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// f12 console输入获取 FID 值</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">PerformanceObserver</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">((</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">entryList</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">for</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">entry</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">of</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> entryList.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">getEntries</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">()) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">delay</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> entry.processingStart </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> entry.startTime;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;FID candidate:&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, delay, entry);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}).</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">observe</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({type: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;first-input&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, buffered: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// f12 console输入获取 FID 值</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">PerformanceObserver</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">((</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">entryList</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">for</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">entry</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">of</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> entryList.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">getEntries</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">()) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">delay</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> entry.processingStart </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> entry.startTime;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;FID candidate:&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, delay, entry);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}).</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">observe</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({type: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;first-input&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, buffered: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">});</span></span></code></pre></div><h3 id="tti-time-to-interactive" tabindex="-1">TTI(Time to Interactive) <a class="header-anchor" href="#tti-time-to-interactive" aria-label="Permalink to &quot;TTI(Time to Interactive)&quot;">​</a></h3><blockquote><p>TTI 指标测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。</p></blockquote><p>long task &gt; 50ms</p><p>TTI指标测量是能持续/流畅响应用户操作的时间，当页面已经进行首次绘制后（FCP），此时浏览器不一定是能响应用户操作的，比如上面FID举的例子，或者是同构应用，页面能很快渲染，但是在客户端还需要一个激活过程。</p><p>TTI的计算方式较为复杂，有以下四点</p><ol><li>先进行First Contentful Paint 首次内容绘制 (FCP)。</li><li>沿时间轴正向搜索时长至少为 5 秒的安静窗口，其中，安静窗口的定义为：没有长任务且不超过两个正在处理的网络 GET 请求。</li><li>沿时间轴反向搜索安静窗口之前的最后一个长任务，如果没有找到长任务，则在 FCP 步骤停止执行。</li><li>TTI 是安静窗口之前最后一个长任务的结束时间（如果没有找到长任务，则与 FCP 值相同）。</li></ol><p>FID测量的是用户首次操作卡顿的时间，TTI测量是FCP后到浏览器能够流畅响应用户输入的时间，判断浏览器是否能够流畅影响用户则是根据上面的几点方式。</p><p><strong>例子</strong>：</p><p>白色方块则是安静窗口，因为满足5s内没有长任务和两个以上的get请求，找到安静窗口后，再往前搜索最后一个长任务，也就是红色虚线处，那么到这个橙色长任务的结束时间就是TTI时间</p><p>如果没有长任务，TTI和FCP时间几乎是相同的。</p><p>实际有长任务的情况，html还是上面FID举例的那个，在FCP后，会用2s下载一个js文件，并且js文件是一个长任务，可以看到TTI和FCP之间差了大概2s的时间。 <img${ssrRenderAttr("src", _imports_4)} alt="img_6.png"></p><h3 id="tbt-total-blocking-time-fcp到tti这个区间段-每个长任务段阻塞时间之和" tabindex="-1">TBT(Total Blocking Time) - FCP到TTI这个区间段，每个长任务段阻塞时间之和 <a class="header-anchor" href="#tbt-total-blocking-time-fcp到tti这个区间段-每个长任务段阻塞时间之和" aria-label="Permalink to &quot;TBT(Total Blocking Time) - FCP到TTI这个区间段，每个长任务段阻塞时间之和&quot;">​</a></h3><blockquote><p>TBT指标可以理解为是TTI指标的一个补充指标，TTI描述的是页面什么时候可以持续响应交互，TBT则是描述阻塞的严重程度</p></blockquote><p>比如长任务的定义是超过50ms，那么阻塞时间是总执行时间-50ms。也就是说一个长任务总时间是60ms,那么阻塞时间实际上是60-50=10ms。(计算的是阻塞时长 = 实际时长 - 50ms)</p><h3 id="cls-cumulative-layout-shift-累积布局偏移-牛逼-0-1-一般-0-25-辣鸡" tabindex="-1">CLS(Cumulative Layout Shift) - 累积布局偏移 （牛逼 &lt; 0.1 &lt; 一般 &lt; 0.25 &lt; 辣鸡） <a class="header-anchor" href="#cls-cumulative-layout-shift-累积布局偏移-牛逼-0-1-一般-0-25-辣鸡" aria-label="Permalink to &quot;CLS(Cumulative Layout Shift) - 累积布局偏移  （牛逼 &lt; 0.1 &lt; 一般  &lt; 0.25 &lt; 辣鸡）&quot;">​</a></h3><blockquote><p>CLS指标测量的是页面的视觉稳定性 / 衡量页面的可见内容偏移的程度</p></blockquote><p>假设你打开了一个网页，刚进去有一个确认按钮，点击确认之后，因为页面还没有加载完，突然，多出来一个取消按钮，确认按钮被挤上去了，实际你点击是取消按钮。</p><p>出现这种情况的一个最常见原因就是img标签没有固定宽高</p><p>只有当现有元素的起始位置发生变更时才算作布局偏移。如果将新元素添加到 DOM 或是现有元素更改大小，则不算作布局偏移，前提是元素的变更不会导致其他可见元素的起始位置发生改变。</p><ul><li>什么情况下视为发生了布局偏移？</li></ul><p>当现有元素更改其起始位置时，才会发生布局偏移， 添加新元素或者现有元素更改尺寸不计入布局偏移中。布局偏移的计算与Layout Instability API 有关，</p><p>布局偏移分数 = 影响分数 * 距离分数。影响比例 为变动大小占总视口的百分比，即两个帧变动块的并集。距离分数 为不稳定元素相对于视口的 移动距离 占总视口的百分比。</p><blockquote><p>布局偏移肯定是无法避免的，例如用户的交互触发了一些布局和网页内容的变动，但是我们可以通过预先占好空间、显示进度加载组件、添加过渡动画等，帮助用户更好地了解接下来发生了什么。</p></blockquote><h3 id="l-load" tabindex="-1">L （Load） <a class="header-anchor" href="#l-load" aria-label="Permalink to &quot;L （Load）&quot;">​</a></h3><blockquote><p>L 反映了整个页面加载的时间。</p></blockquote><p>指页面完全加载完成的时间点。包括所有资源（如图片、样式表、脚本等）都已下载完成，并且相关的 DOM、CSSOM 和 JavaScript 都已经处理完成。</p><h2 id="资源优化" tabindex="-1">资源优化 <a class="header-anchor" href="#资源优化" aria-label="Permalink to &quot;资源优化&quot;">​</a></h2><p>该项措施可以帮助我们优化 FP、FCP、LCP 指标。</p><ul><li>压缩文件、使用 Tree-shaking 删除无用代码</li><li>服务端配置 Gzip 进一步再压缩文件体积</li><li>资源按需加载</li><li>通过 Chrome DevTools 分析首屏不需要使用的 CSS 文件，以此来精简 CSS</li><li>内联关键的 CSS 代码</li><li>使用 CDN 加载资源及 dns-prefetch 预解析 DNS 的 IP 地址对资源使用 preconnect，以便预先进行 IP 解析、TCP 握手、TLS 握手</li><li>缓存文件，对首屏数据做离线缓存</li><li>图片优化，包括：用 CSS 代替蹄片、裁剪适配屏幕的图片大小、小图使用 base64 或者 PNG 格式、支持 WebP 就尽量使用 WebP、渐进式加载图片</li><li></li></ul><h2 id="网络优化" tabindex="-1">网络优化 <a class="header-anchor" href="#网络优化" aria-label="Permalink to &quot;网络优化&quot;">​</a></h2><p>该项措施可以帮助我们优化 FP、FCP、LCP 指标。 这块内容大多可以让后端或者运维帮你去配置，升级至最新的网络协议通常能让你网站加载的更快。 比如说使用 HTTP2.0 协议、TLS 1.3 协议或者直接拥抱 QUIC 协议~</p><h2 id="优化耗时任务" tabindex="-1">优化耗时任务 <a class="header-anchor" href="#优化耗时任务" aria-label="Permalink to &quot;优化耗时任务&quot;">​</a></h2><p>该项措施可以帮助我们优化 TTI、FID、TBT 指标。</p><ul><li>使用 Web Worker 将耗时任务丢到子线程中，这样能让主线程在不卡顿的情况下处理 JS 任务</li><li>调度任务 + 时间切片，这块技术在 React 16 中有使用到。简单来说就是给不同的任务分配优先级，然后将一段长任务切片，这样能尽量保证任务只在浏览器的空闲时间中执行而不卡顿主线程</li></ul><h2 id="不要动态插入内容" tabindex="-1">不要动态插入内容 <a class="header-anchor" href="#不要动态插入内容" aria-label="Permalink to &quot;不要动态插入内容&quot;">​</a></h2><p>该项措施可以帮助我们优化 CLS 指标。</p><ul><li>使用骨架屏给用户一个预期的内容框架，突兀的显示内容体验不会很好</li><li>图片切勿不设置长宽，而是使用占位图给用户一个图片位置的预期</li><li>不要在现有的内容中间插入内容，起码给出一个预留位置</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/performance/性能指标.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const ____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  ____ as default
};
