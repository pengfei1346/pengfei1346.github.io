import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"事件","description":"","frontmatter":{"sidebar":null,"title":"事件","date":"2022-09-14T00:00:00.000Z","tags":["vue3"]},"headers":[],"relativePath":"frame/vue3/事件.md","filePath":"frame/vue3/事件.md","lastUpdated":1701066505000}');
const _sfc_main = { name: "frame/vue3/事件.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h1><h2 id="事件修饰符" tabindex="-1">事件修饰符 <a class="header-anchor" href="#事件修饰符" aria-label="Permalink to &quot;事件修饰符&quot;">​</a></h2><p>在处理事件时调用 event.preventDefault() 或 event.stopPropagation() =》 不处理dom事件，使用vue内置修饰符，简化代码</p><blockquote><p>修饰符是有顺序，按照代码顺序生成</p></blockquote><ul><li>.stop - 单击事件将停止传递</li><li>.prevent - 阻止冒泡</li><li>.self - 仅当 event.target 是元素本身时才会触发事件处理器</li><li>.capture - <code>capture</code> 捕获模式。在被内部元素处理前，先被外部处理</li><li>.once - 被触发一次</li><li>.passive - 改善移动端设备的滚屏性能。</li></ul><p><strong>passive</strong></p><p>addEventListener() 的 passive 默认值始终为 false，触摸事件和滚轮事件的事件监听器在浏览器尝试滚动页面时可能阻塞浏览器主线程。 passive 设为 true 可以启用性能优化，并可大幅改善应用性能</p><h2 id="按键修饰符" tabindex="-1">按键修饰符 <a class="header-anchor" href="#按键修饰符" aria-label="Permalink to &quot;按键修饰符&quot;">​</a></h2><blockquote><p>直接使用 KeyboardEvent.key 暴露的按键名称作为修饰符，需要转为 kebab-case 形式。</p></blockquote><p><strong>按键别名</strong></p><ul><li>.enter</li><li>.tab</li><li>.delete (捕获“Delete”和“Backspace”两个按键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ul><h2 id="系统按键修饰符" tabindex="-1">系统按键修饰符 <a class="header-anchor" href="#系统按键修饰符" aria-label="Permalink to &quot;系统按键修饰符&quot;">​</a></h2><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><h2 id="exact-修饰符" tabindex="-1">.exact 修饰符 <a class="header-anchor" href="#exact-修饰符" aria-label="Permalink to &quot;.exact 修饰符&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">button</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> @</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">click</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">ctrl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">onClick</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;A&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">button</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">button</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> @</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">click</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.ctrl.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">exact</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">onCtrlClick</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;A&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">button</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">button</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> @</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">click</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">exact</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">onClick</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;A&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">button</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- 当按下 Ctrl 时，即使同时按下 Alt 或 Shift 也会触发 --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">button</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> @</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">click</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">ctrl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">onClick</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;A&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">button</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- 仅当按下 Ctrl 且未按任何其他键时才会触发 --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">button</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> @</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">click</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.ctrl.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">exact</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">onCtrlClick</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;A&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">button</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">button</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> @</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">click</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">exact</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">onClick</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;A&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">button</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><h2 id="鼠标按键修饰符" tabindex="-1">鼠标按键修饰符 <a class="header-anchor" href="#鼠标按键修饰符" aria-label="Permalink to &quot;鼠标按键修饰符&quot;">​</a></h2><ul><li>.left</li><li>.right</li><li>.middle</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("frame/vue3/事件.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const __ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  __ as default
};
