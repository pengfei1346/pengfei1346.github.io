import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"沙箱","description":"","frontmatter":{"isTimeLine":true,"title":"沙箱","date":"2021-11-21T00:00:00.000Z","tags":["js基础"]},"headers":[],"relativePath":"front/javascript/mutationObserver.md","filePath":"front/javascript/mutationObserver.md","lastUpdated":1745136782000}');
const _sfc_main = { name: "front/javascript/mutationObserver.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="mutationobserver" tabindex="-1">MutationObserver <a class="header-anchor" href="#mutationobserver" aria-label="Permalink to &quot;MutationObserver&quot;">​</a></h1><h2 id="mutationobserver-1" tabindex="-1">MutationObserver <a class="header-anchor" href="#mutationobserver-1" aria-label="Permalink to &quot;MutationObserver&quot;">​</a></h2><p>MutationObserver 是 HTML5 引入的一种用于监听 DOM 树变化的接口</p><blockquote><p>Mutation Observer 有以下特点：</p><p>1, 它等待所有脚本任务完成后，才会运行（即异步触发方式）。</p><p>2, 它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。</p><p>3, 它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。</p></blockquote><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><ul><li>监听 DOM 树变化</li><li>监听属性变化</li><li>监听子节点变化</li></ul><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><p>MutationObserver 通过异步方式监测 DOM 变化，这意味着当 DOM 变化发生时，MutationObserver 不会立即执行回调函数，而是将这些变化存入一个队列中，并在本轮 JavaScript 执行完之后，才批量处理这些变化</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>MutationObserver 是一个构造函数，通过 new 关键字创建一个实例，然后调用 observe 方法来监听 DOM 树变化。 observe 方法接收两个参数：</p><ul><li>target：要监听的 DOM 节点</li><li>options：监听的选项，包括以下属性： <ul><li>attributes：当元素的属性变化时触发回调（默认为 false）。</li><li>childList：当目标节点的子节点被添加或删除时触发回调（默认为 false）。</li><li>subtree：当设置为 true 时，监视目标节点及其所有后代节点的变化（默认为 false）。</li><li>characterData：当节点的文本内容变化时触发回调（默认为 false）。</li><li>attributeOldValue：当属性变化时，记录变化前的属性值（默认为 false）。</li><li>characterDataOldValue：当文本节点变化时，记录变化前的文本内容（默认为 false ）。</li><li>attributeFilter：一个属性名称的数组，指定监听的属性变化（如果不设置，则监听所有属性）。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 创建一个 MutationObserver 实例，传入一个回调函数。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用 observe 方法开始监听目标节点及其相关的变化。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 当不再需要监听时，使用 disconnect 方法停止观察</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">observer</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">MutationObserver</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(callback);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">observer.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">observe</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(targetNode, options);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 创建一个 MutationObserver 实例，传入一个回调函数。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用 observe 方法开始监听目标节点及其相关的变化。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 当不再需要监听时，使用 disconnect 方法停止观察</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">observer</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">MutationObserver</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(callback);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">observer.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">observe</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(targetNode, options);</span></span></code></pre></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/javascript/mutationObserver.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const mutationObserver = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  mutationObserver as default
};
