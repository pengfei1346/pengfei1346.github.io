import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img.41122e1f.png";
const _imports_1 = "/assets/img_1.56df3631.png";
const _imports_2 = "/assets/img_2.8b978e3d.png";
const __pageData = JSON.parse('{"title":"回流和重绘","description":"","frontmatter":{"sidebar":null,"group":null,"title":"回流和重绘","date":"2023-11-14T00:00:00.000Z","sticky":1},"headers":[],"relativePath":"browser/回流和重绘.md","filePath":"browser/回流和重绘.md","lastUpdated":1701327138000}');
const _sfc_main = { name: "browser/回流和重绘.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-label="Permalink to &quot;回流和重绘&quot;">​</a></h1><h2 id="页面渲染过程" tabindex="-1">页面渲染过程 <a class="header-anchor" href="#页面渲染过程" aria-label="Permalink to &quot;页面渲染过程&quot;">​</a></h2><p><img${ssrRenderAttr("src", _imports_0)} alt="img.png"></p><ul><li>解析HTML构建DOM Tree</li><li>解析CSS构建CSSOM Tree</li><li>构建渲染树（Render Tree），渲染树🌲只包含渲染网页所需的节点</li></ul><p><strong>为构建渲染树，浏览器大体上完成了下列工作:</strong></p><ol><li>从 DOM 树的根节点开始遍历每个可见节点。 <ol><li>某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。</li><li>某些节点通过 CSS 隐藏（例如display: none），因此在渲染树中也会被忽略。</li></ol></li><li>对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们。</li><li>发射可见节点，连同其内容和计算的样式。</li></ol><p><strong>visibility: hidden 与 display: none</strong></p><p><strong>“布局”阶段</strong></p><p>布局计算每个DOM对象的精确位置和大小 渲染（绘制，合成），使用最终渲染树将像素渲染到屏幕上</p><p><a href="https://juejin.cn/post/7028385332391477255" target="_blank" rel="noreferrer">https://juejin.cn/post/7028385332391477255</a></p><h2 id="回到主题-什么是回流-reflow-与重绘-repaint" tabindex="-1">回到主题 什么是回流（Reflow）与重绘（Repaint）？ <a class="header-anchor" href="#回到主题-什么是回流-reflow-与重绘-repaint" aria-label="Permalink to &quot;回到主题 什么是回流（Reflow）与重绘（Repaint）？&quot;">​</a></h2><p><strong>回流（Reflow）</strong></p><p>当渲染树render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。</p><p>简单来说，回流就是计算元素在设备内的确切位置和大小并且重新绘制</p><p>回流的代价要远大于重绘。并且回流必然会造成重绘，但重绘不一定会造成回流。</p><p><strong>重绘（Repaint）</strong></p><p>当渲染树render tree中的一些元素需要更新样式，但这些样式属性只是改变元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘(repaint)。</p><p>简单来说，重绘就是将渲染树节点转换为屏幕上的实际像素，不涉及重新布局阶段的位置与大小计算</p><h2 id="为什么不建议频繁操作dom" tabindex="-1"><strong>为什么不建议频繁操作DOM？</strong> <a class="header-anchor" href="#为什么不建议频繁操作dom" aria-label="Permalink to &quot;**为什么不建议频繁操作DOM？**&quot;">​</a></h2><p><strong><em>不仅要避免去操作DOM，还要减少访问DOM的次数。</em></strong></p><p>因为在浏览器中，DOM和JS的实现，并不是在同一个引擎中完成的。DOM是属于渲染引擎中的东⻄，⽽JS⼜是JS引擎中的东⻄。当我们通过JS操作DOM的时候，就涉及到了两个线程之间的通信，那么势必会带来⼀些性能上的损耗。操作DOM次数⼀多，也就等同于⼀直在进⾏线程之间的通信，并且操作DOM可能还会带来重绘回流的情况，所以也就导致了性能上的问题。</p><h2 id="何时会发生回流-reflow-与重绘-repaint" tabindex="-1">何时会发生回流（Reflow）与重绘（Repaint）？ <a class="header-anchor" href="#何时会发生回流-reflow-与重绘-repaint" aria-label="Permalink to &quot;何时会发生回流（Reflow）与重绘（Repaint）？&quot;">​</a></h2><p><strong>会导致回流的操作：</strong></p><ul><li>页面首次渲染（无法避免且开销最大的一次）</li><li>浏览器窗口大小发生改变（resize事件）</li><li>元素尺寸或位置发生改变（边距、宽高、边框等）</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化（font-size）</li><li>添加或者删除可见的DOM元素</li><li>激活CSS伪类（例如：:hover）</li><li>查询某些属性或调用某些方法</li></ul><p><img${ssrRenderAttr("src", _imports_1)} alt="img_1.png"></p><p><strong>为什么获取一些属性或调用方法也会导致回流？</strong></p><p>因为以上属性和方法都需要返回最新的布局信息，因此浏览器不得不触发回流重绘来返回正确的值。</p><p>会导致重绘的属性</p><p><img${ssrRenderAttr("src", _imports_2)} alt="img_2.png"></p><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fcsstriggers.com%2F" target="_blank" rel="noreferrer">CSS Triggers</a></p><h2 id="浏览器的优化机制" tabindex="-1">浏览器的优化机制 <a class="header-anchor" href="#浏览器的优化机制" aria-label="Permalink to &quot;浏览器的优化机制&quot;">​</a></h2><p>由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才会进行批量修改并清空队列。但是，在获取布局信息的时候，会强制刷新队列，比如当你访问以下属性或者使用以下方法：</p><ul><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>getComputedStyle()</li><li>getBoundingClientRect</li><li>具体可以访问这个网站：<a href="https://link.juejin.cn/?target=https%253A%252F%252Fgist.github.com%252Fpaulirish%252F5d52fb081b3570c81e3a" target="_blank" rel="noreferrer">paulirish</a></li></ul><p>以上属性和方法都需要返回最新的布局信息，因此浏览器不得不清空队列，触发回流重绘来返回正确的值。因此，我们在修改样式的时候，最好避免使用上面列出的属性，他们都会刷新渲染队列。</p><h2 id="如何减少回流-reflow-与重绘-repaint-优化" tabindex="-1">如何减少回流（Reflow）与重绘（Repaint）？（优化） <a class="header-anchor" href="#如何减少回流-reflow-与重绘-repaint-优化" aria-label="Permalink to &quot;如何减少回流（Reflow）与重绘（Repaint）？（优化）&quot;">​</a></h2><p>1、合并对DOM样式的修改，采用css class来修改</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">el</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">el.style.margin </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;5px&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">el.style.borderRadius </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;12px&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">el.style.boxShadow </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;1px 3px 4px #ccc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.update{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">margin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: 5px;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   border</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">dadius</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: 12px;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">   box</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">-</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">shadow</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: 1px 3px 4px #ccc</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">el</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">el.classList.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">add</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;update&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">el</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">el.style.margin </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;5px&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">el.style.borderRadius </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;12px&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">el.style.boxShadow </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;1px 3px 4px #ccc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">.update{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">margin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: 5px;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   border</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">dadius</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: 12px;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">   box</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">-</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">shadow</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: 1px 3px 4px #ccc</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">el</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">el.classList.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">add</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;update&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span></code></pre></div><p>如果需要对DOM进行多次访问，尽量使用局部变量缓存该DOM</p><p>避免使用table布局，可能很⼩的⼀个⼩改动会造成整个table的重新布局</p><p>CSS选择符从右往左匹配查找，避免节点层级过多</p><p>2、DOM离线处理，减少回流重绘次数</p><p>离线的DOM不属于当前DOM树中的任何一部分，这也就意味着我们对离线DOM处理就不会引起页面的回流与重绘。</p><p>使用display: none，上面我们说到了 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分，之后在该DOM上的操作不会触发回流与重绘，操作完之后再将display属性改为显示，只会触发这一次回流与重绘。</p><p>visibility : hidden 的元素只对重绘有影响，不影响重排。</p><p>通过 documentFragment 创建一个 dom 文档片段,在它上面批量操作 dom，操作完成之后，再添加到文档中，这样只会触发一次重排。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">el</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">fruits</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> [</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;front&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;nanjiu&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;study&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;code&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">fragment</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">createDocumentFragment</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">fruits.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">forEach</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">item</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">li</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;li&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  li.innerHTML </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> item;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  fragment.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(li);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">});</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">el.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(fragment);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">el</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">fruits</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> [</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;front&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;nanjiu&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;study&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;code&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">fragment</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">createDocumentFragment</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">fruits.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">forEach</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">item</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">li</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;li&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  li.innerHTML </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> item;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  fragment.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(li);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">});</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">el.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(fragment);</span></span></code></pre></div><p>克隆节点，修改完再替换原始节点</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">el</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">fruits</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> [</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;front&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;nanjiu&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;study&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;code&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">cloneEl</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> el.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">cloneNode</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">fruits.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">forEach</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">item</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">li</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;li&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  li.innerHTML </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> item;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  cloneEl.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(li);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">});</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">el.parentElement.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">replaceChild</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(cloneEl,el)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">el</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">querySelector</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.box&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">fruits</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> [</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;front&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;nanjiu&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;study&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;code&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">cloneEl</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> el.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">cloneNode</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">fruits.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">forEach</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">item</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">li</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;li&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  li.innerHTML </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> item;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  cloneEl.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(li);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">});</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">el.parentElement.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">replaceChild</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(cloneEl,el)</span></span></code></pre></div><h2 id="dom脱离普通文档流" tabindex="-1">DOM脱离普通文档流 <a class="header-anchor" href="#dom脱离普通文档流" aria-label="Permalink to &quot;DOM脱离普通文档流&quot;">​</a></h2><p>使用absoult或fixed让元素脱离普通文档流，使用绝对定位会使的该元素单独成为渲染树中 body 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。</p><h2 id="css3硬件加速-gpu加速" tabindex="-1">CSS3硬件加速（GPU加速） <a class="header-anchor" href="#css3硬件加速-gpu加速" aria-label="Permalink to &quot;CSS3硬件加速（GPU加速）&quot;">​</a></h2><p>使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。 常见的触发硬件加速的css属性：</p><ul><li>transform</li><li>opacity</li><li>filters</li><li>Will-change</li></ul><h2 id="将节点设置为图层" tabindex="-1">将节点设置为图层 <a class="header-anchor" href="#将节点设置为图层" aria-label="Permalink to &quot;将节点设置为图层&quot;">​</a></h2><p>图层能够阻⽌该节点的渲染⾏为影响别的节点。⽐如对于video标签来说，浏览器会⾃动将该节点变为图层。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("browser/回流和重绘.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  _____ as default
};
