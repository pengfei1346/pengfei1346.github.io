import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/assets/img_1.8c68f55e.png";
const _imports_1 = "/assets/img.f8863e5a.png";
const _imports_2 = "/assets/img_2.e474ec54.png";
const _imports_3 = "/assets/img_3.1d6fce09.png";
const _imports_4 = "/assets/img_4.3be1835c.png";
const __pageData = JSON.parse('{"title":"webpack","description":"","frontmatter":{"isTimeLine":true,"title":"webpack","date":"2023-11-21T00:00:00.000Z","tags":["webpack"]},"headers":[],"relativePath":"front/CICD/webpack.md","filePath":"front/CICD/webpack.md","lastUpdated":1713944232000}');
const _sfc_main = { name: "front/CICD/webpack.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h1><p><img${ssrRenderAttr("src", _imports_0)} alt="img_1.png"></p><p><strong>Webpack 慢的原因</strong> Webpack 启动后会做一堆事情，经历一条很长的编译打包链条，从入口开始需要逐步经历语法解析、依赖收集、代码转译、打包合并、代码优化，最终将高版本的、离散的源码编译打包成低版本、高兼容性的产物代码，中间CPU、IO 操作过多，在 Node 运行时下性能必然是有问题。</p><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><p>微内核服务架构，就是一个打包工具。</p><p>主要有三个作用：</p><ul><li>模块打包 -》 将不同模块的文件打包整合在一起，保证项目结构的清晰和可读性</li><li>编译兼容 -》 可以使用新特性和新语法做开发，提高开发效率</li><li>能力扩展 -》 通过webpack的Plugin机制，实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量</li></ul><blockquote><p>webpack 默认支持处理 JS 与 JSON 文件，打包其他文件需要借助loader。</p></blockquote><p><strong>比较重点的配置解析</strong></p><p>mode（模式）</p><ul><li>development 开发模式，打包更加快速，省了代码优化步骤</li><li>production 生产模式，打包比较慢，会开启 tree-shaking 和 压缩代码</li><li>none 不使用任何默认优化选项</li></ul><p><strong>&amp; 不同环境功能侧重点</strong></p><p><strong>本地环境</strong>：</p><ul><li>需要更快的构建速度</li><li>需要打印 debug 信息</li><li>需要 live reload 或 hot reload 功能</li><li>需要 sourcemap 方便定位问题 ...</li></ul><p><strong>生产环境</strong>：</p><ul><li>需要更小的包体积，代码压缩+tree-shaking</li><li>需要进行代码分割</li><li>需要压缩图片体积</li><li>...</li></ul><h2 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h2><p>项目入口</p><h2 id="output" tabindex="-1">output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;output&quot;">​</a></h2><p>打包出口</p><h2 id="打包原理" tabindex="-1">打包原理 <a class="header-anchor" href="#打包原理" aria-label="Permalink to &quot;打包原理&quot;">​</a></h2><ul><li>1、读取webpack的配置参数；</li><li>2、启动webpack，创建Compiler对象并开始解析项目；</li><li>3、从入口文件（entry）开始解析，并且找到其导入的依赖模块，递归遍历分析，形成依赖关系树；</li><li>4、对不同文件类型的依赖模块文件使用对应的Loader进行编译，最终转为Javascript文件；</li><li>5、整个过程中webpack会通过发布订阅模式，向外抛出一些hooks，而webpack的插件即可通过监听这些关键的事件节点，执行插件任务进而达到干预输出结果的目的。</li></ul><p><strong>webpack主要依赖于compiler和compilation两个核心对象实现。</strong></p><p>compiler对象是一个全局单例，他负责把控整个webpack打包的构建流程。 compilation对象是每一次构建的上下文对象，它包含了当次构建所需要的所有信息，每次热更新和重新构建，compiler都会重新生成一个新的compilation对象，负责此次更新的构建过程。</p><p>而每个模块间的依赖关系，则依赖于AST语法树。每个模块文件在通过Loader解析完成之后，会通过acorn库生成模块代码的AST语法树，通过语法树就可以分析这个模块是否还有依赖的模块，进而继续循环执行下一个模块的编译解析。</p><p>最终Webpack打包出来的bundle文件是一个IIFE的执行函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack 5 打包的bundle文件内容</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> { </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpackBootstrap</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">__webpack_modules__</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> ({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;file-A-path&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: ((</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">modules</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;index-file-path&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: ((</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">__unused_webpack_module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">__unused_webpack_exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">__webpack_require__</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ... </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    })</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  })</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// The module cache</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> __webpack_module_cache__ </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// The require function</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">__webpack_require__</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">moduleId</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Check if module is in cache</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> cachedModule </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> __webpack_module_cache__[moduleId];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (cachedModule </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">!==</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">undefined</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> cachedModule.exports;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Create a new module (and put it into the cache)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> module </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> __webpack_module_cache__[moduleId] </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// no module.id needed</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// no module.loaded needed</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      exports: {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    };</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Execute the module function</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    __webpack_modules__[moduleId](</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, __webpack_require__);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Return the exports of the module</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// startup</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Load entry module and return exports</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// This entry module can&#39;t be inlined because the eval devtool is used.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">var</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> __webpack_exports__ </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">__webpack_require__</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;./src/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack 5 打包的bundle文件内容</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">(() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> { </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpackBootstrap</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">var</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">__webpack_modules__</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> ({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;file-A-path&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: ((</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">modules</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;index-file-path&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: ((</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">__unused_webpack_module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">__unused_webpack_exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">__webpack_require__</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ... </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    })</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  })</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// The module cache</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">var</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> __webpack_module_cache__ </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// The require function</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">__webpack_require__</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">moduleId</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Check if module is in cache</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">var</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> cachedModule </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> __webpack_module_cache__[moduleId];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (cachedModule </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">!==</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">undefined</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> cachedModule.exports;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Create a new module (and put it into the cache)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">var</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> module </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> __webpack_module_cache__[moduleId] </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// no module.id needed</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// no module.loaded needed</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      exports: {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    };</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Execute the module function</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    __webpack_modules__[moduleId](</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, __webpack_require__);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Return the exports of the module</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// startup</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Load entry module and return exports</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// This entry module can&#39;t be inlined because the eval devtool is used.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">var</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> __webpack_exports__ </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">__webpack_require__</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;./src/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">})</span></span></code></pre></div><p>和webpack4相比，webpack5打包出来的bundle做了相当的精简。在上面的打包demo中，整个立即执行函数里边只有三个变量和一个函数方法，__webpack_modules__存放了编译后的各个文件模块的JS内容，<strong>webpack_module_cache</strong> 用来做模块缓存，__webpack_require__是Webpack内部实现的一套依赖引入函数。最后一句则是代码运行的起点，从入口文件开始，启动整个项目。</p><p>其中值得一提的是__webpack_require__模块引入函数，我们在模块化开发的时候，通常会使用ES Module或者CommonJS规范导出/引入依赖模块，webpack打包编译的时候，会统一替换成自己的__webpack_require__来实现模块的引入和导出，从而实现模块缓存机制，以及抹平不同模块规范之间的一些差异性。</p><h2 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h2><p>webpack是个模块打包器。但是webpack只能处理js和json文件。loader的作用就是用来解析对应类型的文件。</p><blockquote><p>loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中。</p></blockquote><p>loader本质上是一个导出函数的JS模块，函数的入参和出参可以理解为文件流(String或Buffer类)，函数对传入的文件流进行处理，然后返回处理后的新文件流。</p><p>loader支持<strong>同步</strong>和<strong>异步</strong>；两种方式，官方推荐异步方式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 同步方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">content</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">map</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">meta</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// content就是传进来的文件内容</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 对content进行处理</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">newContent</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">doSomething</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(content);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> newContent; </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 返回处理后的文件内容</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 异步方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">content</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">map</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">meta</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">callback</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">async</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(); </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 获取到callback函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 对content进行处理</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">newContent</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">doSomething</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(content);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// callback的参数有4个，按顺序分别是：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 1. 错误参数Error或null，必传</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 2. String/Buffer类型的content，必传</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 3. 可选参数sourceMap</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 4. 可选参数meta</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">callback</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, newContent, map, meta);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 同步方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">content</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">map</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">meta</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// content就是传进来的文件内容</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 对content进行处理</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">newContent</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">doSomething</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(content);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> newContent; </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 返回处理后的文件内容</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 异步方式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">content</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">map</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">meta</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">callback</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">async</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(); </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 获取到callback函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 对content进行处理</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">newContent</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">doSomething</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(content);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// callback的参数有4个，按顺序分别是：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 1. 错误参数Error或null，必传</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 2. String/Buffer类型的content，必传</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 3. 可选参数sourceMap</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 4. 可选参数meta</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">callback</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, newContent, map, meta);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>使用示例：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack.config.js配置loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">rules</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: [{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">css</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;style-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;css-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack.config.js配置loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">rules</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: [{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">css</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;style-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;css-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p>rules规则数组用于指定对模块应用哪些loader</p><ul><li>「test」属性的值是个正则表达式，用于进行文件类型匹配，这里匹配的是以.css或.CSS结尾的文件；</li><li>「use」属性的值是一个loader数组，指明要对这些css文件执行哪些loader操作。这里多个loader会「<strong>从右到左</strong>」进行「<strong>链式调用</strong> 」，比如上面的配置中，会先执行css-loader，再执行style-loader。和gulp的task有点类似，但是执行顺序不一样，gulp是从左到右顺序执行；而loader更像是复合函数，从右往左执行。</li></ul><h3 id="实现自己的loader" tabindex="-1">实现自己的loader <a class="header-anchor" href="#实现自己的loader" aria-label="Permalink to &quot;实现自己的loader&quot;">​</a></h3><p><strong>官方推荐的开发准则</strong> --- <a href="https://www.webpackjs.com/api/loaders/" target="_blank" rel="noreferrer">loader开发文档</a></p><ol><li>保持简单，一个loader只作一件事</li><li>利用链式调用</li><li>模块化</li><li>无状态，每次运行都与之前的运行结果无关</li><li>利用loader-utils包</li><li>用addDependency标明使用的外部文件</li><li>需要解决代码中的模块依赖问题，比如css中的 @import，可以转换成require方式等</li><li>提取公共代码</li><li>避免绝对路径</li><li>使用 peerDependency</li></ol><p>针对每个文件类型，loader是支持以数组的形式配置多个的，因此当Webpack在转换该文件类型的时候，会按顺序链式调用每一个loader，前一个loader返回的内容会作为下一个loader的入参。因此loader的开发需要遵循一些规范，比如返回值必须是标准的JS代码字符串，以保证下一个loader能够正常工作，同时在开发上需要严格遵循“单一职责”，只关心loader的输出以及对应的输出。</p><p>loader函数中的this上下文由webpack提供，可以通过this对象提供的相关属性，获取当前loader需要的各种信息数据，事实上，这个this指向了一个叫loaderContext的loader-runner特有对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack.config.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...other config</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">^</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">your-regExp</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">             loader: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;loader-name-A&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          }, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">             loader: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;loader-name-B&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack.config.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...other config</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">^</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">your-regExp</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">             loader: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;loader-name-A&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          }, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">             loader: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;loader-name-B&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>实现：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// my-loader/index.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">content</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">map</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">meta</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">callback</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">async</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;my loader is running&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">callback</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">null</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, content, map, meta);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// my-loader/index.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">content</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">map</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">meta</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">callback</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">async</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;my loader is running&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">callback</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">null</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, content, map, meta);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>使用：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//webpack.config.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">path</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;path&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    entry: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;./src/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    mode: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;development&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    output: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        filename: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;main.js&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        path: path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;dist&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        rules: [{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">css</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            use: [{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                loader: path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;../my-loader/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//webpack.config.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">path</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;path&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    entry: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;./src/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    mode: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;development&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    output: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        filename: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;main.js&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        path: path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;dist&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        rules: [{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">css</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            use: [{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                loader: path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;../my-loader/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><hr><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h2><blockquote><p>plugin (插件)，是一个具有 apply 方法的 JavaScript 对象，webpack基于<strong>发布订阅模式</strong>，在运行的生命周期中会广播出许多事件，插件通过监听这些事件，就可以在特定的阶段执行自己的插件任务，从而实现自己想要的功能</p></blockquote><p>如果说Loader负责文件转换，那么Plugin便是负责功能扩展。Loader和Plugin作为Webpack的两个重要组成部分，承担着两部分不同的职责。</p><p>compiler和compilation是Webpack两个非常核心的对象，其中compiler暴露了和 Webpack整个生命周期相关的钩子（<a href="https://webpack.js.org/api/compiler-hooks/" target="_blank" rel="noreferrer">compiler-hooks</a>），而compilation则暴露了与模块和依赖有关的粒度更小的事件钩子（<a href="https://webpack.js.org/api/compilation-hooks/" target="_blank" rel="noreferrer">Compilation Hooks</a>）。</p><p>Compiler类提供了很多hook函数(钩子函数)： <img${ssrRenderAttr("src", _imports_1)} alt="img.png"></p><p><strong>核心-Tapable</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Tapable的简单使用</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> { </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">SyncHook</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> } </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;tapable&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">class</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">Car</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">constructor</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在this.hooks中定义所有的钩子事件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.hooks </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            accelerate: </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">SyncHook</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">([</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;newSpeed&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">]),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            brake: </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">SyncHook</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            calculateRoutes: </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">AsyncParallelHook</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">([</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;source&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;target&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;routesList&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">])</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/* ... */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">myCar</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">Car</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 通过调用tap方法即可增加一个消费者，订阅对应的钩子事件了</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">myCar.hooks.brake.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">tap</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;WarningLampPlugin&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, () </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> warningLamp.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">on</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// Tapable的简单使用</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> { </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">SyncHook</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> } </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;tapable&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">class</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">Car</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">constructor</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在this.hooks中定义所有的钩子事件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.hooks </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            accelerate: </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">SyncHook</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">([</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;newSpeed&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">]),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            brake: </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">SyncHook</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            calculateRoutes: </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">AsyncParallelHook</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">([</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;source&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;target&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;routesList&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">])</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/* ... */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">myCar</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">Car</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 通过调用tap方法即可增加一个消费者，订阅对应的钩子事件了</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">myCar.hooks.brake.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">tap</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;WarningLampPlugin&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, () </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> warningLamp.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">on</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">());</span></span></code></pre></div><p><strong>plugin工作流程</strong></p><ul><li>plugin是：「一个具有 apply 方法的 JavaScript 对象」；</li><li>webpack启动后就会创建Compiler实例对象；</li><li>然后调用plugin.apply(compiler)，把当前Compiler实例对象传给plugin；</li><li>最后在webpack运行的生命周期里通过hooks.钩子函数名.call来调用钩子函数中的回调函数。</li><li>无论打包成功或失败，钩子函数afterDone都会在最后被调用</li></ul><p><strong>一个webpack插件包括</strong>：</p><ul><li>一个JS函数或JS类；</li><li>定义apply方法；</li><li>利用钩子函数的tap方法</li><li>在钩子函数的回调里处理webpack内部实例数据(compilation/stats等)</li><li>如果是异步的tapAsync/tapPromise，在处理完成后需调用callback回调函数。</li></ul><h3 id="实现一个自己的plugin" tabindex="-1">实现一个自己的plugin <a class="header-anchor" href="#实现一个自己的plugin" aria-label="Permalink to &quot;实现一个自己的plugin&quot;">​</a></h3><p>注意点：</p><ul><li>插件必须是一个函数或者是一个包含 apply 方法的对象，这样才能访问compiler实例；</li><li>传给每个插件的 compiler 和 compilation 对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件;</li><li>异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住;</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">class</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">myPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">constructor</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">options</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;插件被使用了&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(options)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.options </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> options</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里的compiler是Compiler类的一个实例对象；而Compiler类『扩展(extend)自Tapable类，用来注册和调用插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">apply</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">compiler</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;我运行了！myPlugin&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// compiler -》 实例对象</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// --监听：hooks.钩子函数.tap(name, callback)，name是监听的事件名称，一般与plugin同名；callback是个函数，当钩子函数被触发(call)时会调用callback函数</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//初始化 </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        compiler.hooks.initialize.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">tap</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;myPlugin&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, () </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// --触发：hooks.钩子函数.call([args])</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在这里自定义操作，当钩子函数被call时，就会执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 可以通过hooks.initialize.call来查看钩子函数在源码中的运行时机</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        });</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打包完毕都会运行 afterDone</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        compiler.hooks.afterDone.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">tap</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;myPlugin&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">stats</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">name</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">} </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">this</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.options;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(name);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (name </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">!==</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;张三&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;我不认识你，你走吧！&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            } </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">else</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">if</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (stats) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">subject</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> stats.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">hasErrors</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;[ERROR]webpack打包失败&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">:</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;[SUCCESS]webpack打包成功&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">html</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> stats.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">toString</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">\`&lt;br&gt;&lt;div&gt;\${&quot;打包时间：&quot;</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">Date</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">stats</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">startTime</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">).</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">toLocaleString</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">() </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;-&quot;</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">+</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">Date</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">stats</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">endTime</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">).</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">toLocaleString</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">()</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">}&lt;/div&gt;\`</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">                console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;打包完毕了，干点啥呗&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        });</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> myPlugin;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">class</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">myPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">constructor</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">options</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;插件被使用了&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(options)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.options </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> options</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里的compiler是Compiler类的一个实例对象；而Compiler类『扩展(extend)自Tapable类，用来注册和调用插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">apply</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">compiler</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;我运行了！myPlugin&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// compiler -》 实例对象</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// --监听：hooks.钩子函数.tap(name, callback)，name是监听的事件名称，一般与plugin同名；callback是个函数，当钩子函数被触发(call)时会调用callback函数</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//初始化 </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        compiler.hooks.initialize.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">tap</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;myPlugin&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, () </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// --触发：hooks.钩子函数.call([args])</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 在这里自定义操作，当钩子函数被call时，就会执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 可以通过hooks.initialize.call来查看钩子函数在源码中的运行时机</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        });</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打包完毕都会运行 afterDone</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        compiler.hooks.afterDone.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">tap</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;myPlugin&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">stats</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">name</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">} </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">this</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.options;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(name);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (name </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">!==</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;张三&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;我不认识你，你走吧！&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            } </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">else</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">if</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (stats) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">subject</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> stats.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">hasErrors</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;[ERROR]webpack打包失败&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">:</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;[SUCCESS]webpack打包成功&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">html</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> stats.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">toString</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">+</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">\`&lt;br&gt;&lt;div&gt;\${&quot;打包时间：&quot;</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">+</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">Date</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">(</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">stats</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">.</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">startTime</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">).</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">toLocaleString</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">() </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">+</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;-&quot;</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">+</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">Date</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">(</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">stats</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">.</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">endTime</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">).</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">toLocaleString</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">()</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">}&lt;/div&gt;\`</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">                console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;打包完毕了，干点啥呗&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        });</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> myPlugin;</span></span></code></pre></div><p><strong>如何使用</strong> - webpack.config.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">MyPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;../my-plugin&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)); </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里用的是本地的相对路径引入</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...省略一万字</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    entry: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;./src/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    mode: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;development&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    output: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        filename: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;main.js&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        path: path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;dist&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    plugins: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">HtmlWebpackPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            title: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;Webpack~&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">MyPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            name: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;张三&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }) </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用我们的自定义插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">MyPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;../my-plugin&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)); </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里用的是本地的相对路径引入</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...省略一万字</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    entry: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;./src/index.js&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    mode: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;development&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    output: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        filename: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;main.js&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        path: path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;dist&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    plugins: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">HtmlWebpackPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            title: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;Webpack~&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">MyPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            name: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;张三&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }) </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用我们的自定义插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><h2 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h2><p>Babel 比较重要，单独拿出来。</p><blockquote><p>解决 JS 兼容性</p></blockquote><ul><li>babel-loader 使用 Babel 加载 ES2015+ 代码并将其转换为 ES5</li><li>@babel/core Babel 编译的核心包</li><li>@babel/preset-env Babel 编译的预设，可以理解为 Babel 插件的超集</li></ul><p><strong>基本使用</strong></p><p>根目录增加.babelrc.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ./babelrc.js</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  presets: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;@babel/preset-env&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// useBuiltIns: false 默认值，无视浏览器兼容配置，引入所有 polyfill</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// useBuiltIns: entry 根据配置的浏览器兼容，引入浏览器不兼容的 polyfill</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// useBuiltIns: usage 会根据配置的浏览器兼容，以及你代码中用到的 API 来进行 polyfill，实现了按需添加</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        useBuiltIns: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;entry&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        corejs: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;3.9.1&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 是 core-js 版本号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        targets: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          chrome: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;58&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          ie: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;11&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ./babelrc.js</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  presets: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;@babel/preset-env&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// useBuiltIns: false 默认值，无视浏览器兼容配置，引入所有 polyfill</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// useBuiltIns: entry 根据配置的浏览器兼容，引入浏览器不兼容的 polyfill</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// useBuiltIns: usage 会根据配置的浏览器兼容，以及你代码中用到的 API 来进行 polyfill，实现了按需添加</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        useBuiltIns: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;entry&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        corejs: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;3.9.1&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 是 core-js 版本号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        targets: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          chrome: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;58&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          ie: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;11&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><h2 id="sourcemap-配置选择" tabindex="-1">SourceMap 配置选择 <a class="header-anchor" href="#sourcemap-配置选择" aria-label="Permalink to &quot;SourceMap 配置选择&quot;">​</a></h2><blockquote><p>SourceMap 是一种映射关系，当项目运行后，如果出现错误，我们可以利用 SourceMap 反向定位到源码位置</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    entry: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;./src/index.js&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打包入口地址</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    output: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        filename: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;bundle.js&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        path: path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">join</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;dist&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">), </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    devtool: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;source-map&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    entry: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;./src/index.js&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打包入口地址</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    output: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        filename: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;bundle.js&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        path: path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">join</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;dist&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">), </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    devtool: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;source-map&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span></code></pre></div><p><strong>其他 SourceMap 类型</strong></p><ul><li>source-map - 生成了对应的 SourceMap 文件，打包速度慢，在源代码中定位到错误所在行列信息</li><li>eval - 源代码位置通过 @sourceURL 注明， 无法定位到错误位置，只能定位到某个文件，不用生成 SourceMap 文件，打包速度快</li><li>eval-source-map - 生成代码通过 eval 执行，包含 dataUrl 形式的 SourceMap 文件，可以在编译后的代码中定位到错误所在行列信息，生成 dataUrl 形式的 SourceMap，打包速度慢</li><li>cheap-source-map</li><li>eval-cheap-module-source-map - 生成代码通过 eval 执行 ,包含 dataUrl 形式的 SourceMap 文件 ,可以在编译后的代码中定位到错误所在行信息 ,不需要定位列信息，打包速度较快 ,在源代码中定位到错误所在行信息</li><li>inline-source-map - 通过 dataUrl 的形式引入 SourceMap 文件</li><li>cheap-module-source-map</li><li>inline-cheap-source-map</li><li>cheap-module-eval-source-map</li><li>inline-cheap-module-source-map</li><li>hidden-source-map - 看不到 SourceMap 效果，但是生成了 SourceMap 文件</li><li>nosources-source-map - 能看到错误出现的位置，但是没有办法现实对应的源码</li></ul><p><strong>一图流</strong> ：</p><p><img${ssrRenderAttr("src", _imports_2)} alt="img_2.png"></p><p><strong>校验规则 ^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$</strong></p><p><img${ssrRenderAttr("src", _imports_3)} alt="img_3.png"></p><p><strong>推荐配置</strong></p><p>本地开发 eval-cheap-module-source-map</p><ul><li>本地开发首次打包慢点没关系，因为 eval 缓存的原因，rebuild 会很快</li><li>开发中，我们每行代码不会写的太长，只需要定位到行就行，所以加上 cheap</li><li>我们希望能够找到源代码的错误，而不是打包后的，所以需要加上 module</li></ul><p>生产环境：(none)</p><h3 id="三种-hash-值" tabindex="-1">三种 hash 值 <a class="header-anchor" href="#三种-hash-值" aria-label="Permalink to &quot;三种 hash 值&quot;">​</a></h3><p>例如：filename: &quot;[name][hash:8][ext]&quot;</p><ul><li>hash ：任何一个文件改动，整个项目的构建 hash 值都会改变；</li><li>chunkhash：文件的改动只会影响其所在 chunk 的 hash 值；</li><li>contenthash：每个文件都有单独的 hash 值，文件的改动只会影响自身的 hash 值；</li></ul><p><img${ssrRenderAttr("src", _imports_4)} alt="img_4.png"></p><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><p><strong>speed-measure-webpack-plugin - 构建时间分析</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D speed-measure-webpack-plugin</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 费时分析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">SpeedMeasurePlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;speed-measure-webpack-plugin&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">smp</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">SpeedMeasurePlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">env</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">argv</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里可以通过不同的模式修改 config 配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> smp.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">wrap</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(config);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D speed-measure-webpack-plugin</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 费时分析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">SpeedMeasurePlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;speed-measure-webpack-plugin&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">smp</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">SpeedMeasurePlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">();</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">env</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">argv</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里可以通过不同的模式修改 config 配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> smp.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">wrap</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(config);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>alias</strong> - 配置别名</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">path</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">dir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">join</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  resolve:{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置别名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    alias: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;~&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;@&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;components&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src/components&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">path</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">dir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">join</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  resolve:{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置别名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    alias: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;~&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;@&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;components&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src/components&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>extensions</strong></p><p>用户引入模块时不带扩展名,webpack 会按照 extensions 配置的数组从左到右的顺序去尝试解析模块</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  resolve: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    extensions: [</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.ts&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.js&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.json&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;.wasm&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;...&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  resolve: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    extensions: [</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.ts&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.js&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.json&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;.wasm&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;...&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>modules</strong> 告诉 webpack 解析模块时应该搜索的目录，节省查找时间</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">path</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">dir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">join</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  resolve: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">     modules: [</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">), </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;node_modules&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">path</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">dir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">join</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  resolve: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">     modules: [</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">), </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;node_modules&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>externals</strong></p><p>从输出的 bundle 中排除依赖，节省打包构建的时间</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  externals: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    jquery: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;jQuery&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  externals: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    jquery: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;jQuery&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>缩小范围</strong></p><ul><li><strong>include</strong> - 符合条件的模块进行解析</li><li><strong>exclude</strong> - 排除符合条件的模块，不解析</li><li><strong>noParse</strong> - 不需要解析依赖的第三方大型类库等，可以通过这个字段进行配置，以提高构建速度。使用 noParse 进行忽略的模块文件中不会解析 import、require 等语法</li><li><strong>IgnorePlugin</strong> - 防止在 import 或 require 调用时，生成以下正则表达式匹配的模块： <ul><li>requestRegExp 匹配(test)资源请求路径的正则表达式。</li><li>contextRegExp 匹配(test)资源上下文（目录）的正则表达式。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">path</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">dir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">join</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 不需要解析依赖的第三方大型类库等，可以通过这个字段进行配置，以提高构建速度</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用 noParse 进行忽略的模块文件中不会解析 import、require 等语法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    noParse:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">jquery</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">lodash</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * 在配置 loader 的时候，我们需要更精确的去指定 loader 的作用目录或者需要排除的目录，通过使用 include 和 exclude 两个配置项，可以实现这个功能，常见的例如：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * include：符合条件的模块进行解析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * exclude：排除符合条件的模块，不解析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * exclude 优先级更高</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">js</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        include: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        exclude:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">node_modules</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;babel-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  plugins:[ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//将插件中的非中文语音排除掉，节省打包的体积</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> webpack.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">IgnorePlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      resourceRegExp:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">^</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.\\/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">locale</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      contextRegExp:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">moment</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">path</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">dir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">join</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  module: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 不需要解析依赖的第三方大型类库等，可以通过这个字段进行配置，以提高构建速度</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 使用 noParse 进行忽略的模块文件中不会解析 import、require 等语法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    noParse:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /jquery</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">lodash/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/*</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * 在配置 loader 的时候，我们需要更精确的去指定 loader 的作用目录或者需要排除的目录，通过使用 include 和 exclude 两个配置项，可以实现这个功能，常见的例如：</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * include：符合条件的模块进行解析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * exclude：排除符合条件的模块，不解析</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * exclude 优先级更高</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">          * */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">js</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        include: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        exclude:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /node_modules/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;babel-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  plugins:[ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//将插件中的非中文语音排除掉，节省打包的体积</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> webpack.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">IgnorePlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      resourceRegExp:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">^</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.\\/</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">locale</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      contextRegExp:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /moment</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><h3 id="多进程配置" tabindex="-1">多进程配置 <a class="header-anchor" href="#多进程配置" aria-label="Permalink to &quot;多进程配置&quot;">​</a></h3><blockquote><p>在小型项目中，开启多进程打包反而会增加时间成本，因为启动进程和进程间通信都会有一定开销。</p></blockquote><p><strong>thread-loader</strong> - 配置在 thread-loader 之后的 loader 都会在一个单独的 worker 池（worker pool）中运行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D  thread-loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">path</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">dir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">join</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    noParse:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">jquery</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">lodash</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">js</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        include: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        exclude:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">node_modules</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            loader: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;thread-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 开启多进程打包</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            options: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">              worker: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;babel-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D  thread-loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">path</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;path&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路径处理方法</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">dir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">join</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    noParse:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /jquery</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">lodash/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">js</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        include: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        exclude:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /node_modules/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            loader: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;thread-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 开启多进程打包</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            options: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">              worker: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">3</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;babel-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>happypack ❌</strong></p><p>同样为开启多进程打包的工具，webpack5 已弃用。</p><h2 id="利用缓存" tabindex="-1">利用缓存 <a class="header-anchor" href="#利用缓存" aria-label="Permalink to &quot;利用缓存&quot;">​</a></h2><p><strong>babel-loader 开启缓存</strong></p><ul><li>babel 在转译 js 过程中时间开销比价大，将 babel-loader 的执行结果缓存起来，重新打包的时候，直接读取缓存</li><li>缓存位置： node_modules/.cache/babel-loader</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    noParse:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">jquery</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">lodash</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">js</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        include: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        exclude:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">node_modules</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            loader: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;babel-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            options: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">              cacheDirectory: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 启用缓存</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}"> module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    noParse:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /jquery</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">lodash/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">js</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        include: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        exclude:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /node_modules/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            loader: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;babel-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            options: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">              cacheDirectory: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 启用缓存</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>cache-loader</strong></p><ul><li>缓存一些性能开销比较大的 loader 的处理结果</li><li>缓存位置：node_modules/.cache/cache-loader</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D cache-loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">(s</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">[ac]</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">c)ss</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//匹配所有的 sass/scss/css 文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// &#39;style-loader&#39;,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;cache-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 获取前面 loader 转换的结果</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;css-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;postcss-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;sass-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      }, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D cache-loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}"> module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">(s</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">[ac]</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">c)ss</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//匹配所有的 sass/scss/css 文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// &#39;style-loader&#39;,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          MiniCssExtractPlugin.loader,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;cache-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 获取前面 loader 转换的结果</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;css-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;postcss-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;sass-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      }, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>cache 持久化缓存</strong> webpack5新增 配置</p><p>通过配置 cache 缓存生成的 webpack 模块和 chunk，来改善构建速度。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  cache: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    type: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;filesystem&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  cache: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    type: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;filesystem&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><h2 id="优化构建结果" tabindex="-1">优化构建结果 <a class="header-anchor" href="#优化构建结果" aria-label="Permalink to &quot;优化构建结果&quot;">​</a></h2><p><strong>webpack-bundle-analyzer</strong> - 构建结果分析</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D webpack-bundle-analyzer</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// &quot;scripts&quot;: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   // ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   &quot;analyzer&quot;: &quot;cross-env NODE_ENV=prod webpack --progress --mode production&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// },</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 引入插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">BundleAnalyzerPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;webpack-bundle-analyzer&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">).BundleAnalyzerPlugin</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  plugins:[ </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件 </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">BundleAnalyzerPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// analyzerMode: &#39;disabled&#39;,  // 不启动展示打包报告的http服务器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// generateStatsFile: true, // 是否生成stats.json文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    })</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D webpack-bundle-analyzer</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// &quot;scripts&quot;: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   // ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   &quot;analyzer&quot;: &quot;cross-env NODE_ENV=prod webpack --progress --mode production&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// },</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 引入插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">BundleAnalyzerPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;webpack-bundle-analyzer&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">).BundleAnalyzerPlugin</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  plugins:[ </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件 </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">BundleAnalyzerPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// analyzerMode: &#39;disabled&#39;,  // 不启动展示打包报告的http服务器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// generateStatsFile: true, // 是否生成stats.json文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    })</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>optimize-css-assets-webpack-plugin</strong> - 压缩 CSS</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm install -D optimize-css-assets-webpack-plugin </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 压缩css</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">OptimizeCssAssetsPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  optimization: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    minimize: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    minimizer: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 添加 css 压缩配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">OptimizeCssAssetsPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({}),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm install -D optimize-css-assets-webpack-plugin </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 压缩css</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">OptimizeCssAssetsPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  optimization: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    minimize: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    minimizer: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 添加 css 压缩配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">OptimizeCssAssetsPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({}),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span></code></pre></div><p><strong>terser-webpack-plugin</strong> - 压缩 JS</p><blockquote><p>在生成环境下打包默认会开启 js 压缩，但是当我们手动配置 optimization 选项之后，就不再默认对 js 进行压缩，需要我们手动去配置。</p><p>因为 webpack5 内置了terser-webpack-plugin 插件，所以我们不需重复安装，直接引用就可以了，</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">TerserPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;terser-webpack-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  optimization: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    minimize: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 开启最小化</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    minimizer: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">TerserPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({})</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">TerserPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;terser-webpack-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  optimization: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    minimize: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 开启最小化</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    minimizer: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">TerserPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({})</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>purgecss-webpack-plugin</strong> - 清除无用的 CSS</p><blockquote><p>purgecss-webpack-plugin 会单独提取 CSS 并清除用不到的 CSS</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D purgecss-webpack-plugin</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">PurgecssWebpackPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;purgecss-webpack-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">glob</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;glob&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">); </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 文件匹配模式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">function</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">dir</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">join</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">PATHS</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  src: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  plugins:[ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">PurgecssPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      paths: glob.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">sync</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">\`\${</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">PATHS</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">src</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">}/**/*\`</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, {nodir: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">})</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// npm i -D purgecss-webpack-plugin</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">PurgecssWebpackPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;purgecss-webpack-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">glob</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;glob&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">); </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 文件匹配模式</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">function</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">dir</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">){</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">join</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, dir);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">PATHS</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  src: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  plugins:[ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">PurgecssPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      paths: glob.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">sync</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">\`\${</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">PATHS</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">.</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">src</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">}/**/*\`</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, {nodir: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">})</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><p><strong>Tree-shaking</strong> - 剔除没有使用的代码，以降低包的体积</p><p><a href="https://mp.weixin.qq.com/s/TNXO2ifPymaTxIqzBAmkSQ" target="_blank" rel="noreferrer">从过去到现在，聊聊 Tree-shaking</a></p><p>webpack 默认支持，需要在 .bablerc 里面设置 model：false，即可在生产环境下默认开启</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  presets: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;@babel/preset-env&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        module: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">false</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        useBuiltIns: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;entry&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        corejs: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;3.9.1&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        targets: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          chrome: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;58&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          ie: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;11&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  plugins: [    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    [</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;@babel/plugin-proposal-decorators&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, { legacy: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> }],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    [</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;@babel/plugin-proposal-class-properties&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, { loose: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> }],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  presets: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;@babel/preset-env&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        module: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">false</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        useBuiltIns: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;entry&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        corejs: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;3.9.1&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        targets: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          chrome: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;58&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          ie: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;11&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  plugins: [    </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    [</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;@babel/plugin-proposal-decorators&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, { legacy: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> }],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    [</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;@babel/plugin-proposal-class-properties&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, { loose: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> }],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><p><strong>Scope Hoisting</strong> - 作用域提升</p><blockquote><p>将多个模块放在同一个作用域下，并重命名防止命名冲突，通过这种方式可以减少函数声明和内存开销。</p></blockquote><ul><li>webpack 默认支持，在生产环境下默认开启</li><li>只支持 es6 代码</li></ul><p><strong>优化运行时体验</strong></p><blockquote><p>提升首屏的加载速度 -&gt;</p><p>降低首屏加载文件体积，首屏不需要的文件进行预加载或者按需加载</p></blockquote><p><strong>splitChunks 分包配置</strong></p><blockquote><p>optimization.splitChunks 是基于 SplitChunksPlugin 插件实现的</p></blockquote><p>webpack 将根据以下条件自动拆分 chunks：</p><ul><li>新的 chunk 可以被共享，或者模块来自于 node_modules 文件夹</li><li>新的 chunk 体积大于 20kb（在进行 min+gz 之前的体积）</li><li>当按需加载 chunks 时，并行请求的最大数量小于或等于 30</li><li>当加载初始化页面时，并发请求的最大数量小于或等于 30</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  optimization: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    splitChunks: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      chunks: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;async&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 有效值为\`all\`，\`async\` 和 \`initial\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      minSize: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">20000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 生成 chunk 的最小体积（≈ 20kb)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      minRemainingSize: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 确保拆分后剩余的最小 chunk 体积超过限制来避免大小为零的模块</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      minChunks: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 拆分前必须共享模块的最小 chunks 数。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      maxAsyncRequests: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">30</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 最大的按需(异步)加载次数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      maxInitialRequests: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">30</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件）</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      enforceSizeThreshold: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">50000</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      cacheGroups: { </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置提取模块的方案</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        elementUI: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          name: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;chunk-elementUI&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// split elementUI into a single package</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          priority: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">20</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">[</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\\\</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">/]</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">node_modules</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">[</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\\\</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">/]</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">_</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">element-ui(</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">.</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">*</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">)</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// in order to adapt to cnpm</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// echarts: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   name: &#39;chunk-echarts&#39;, // split elementUI into a single package</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   priority: 20, // the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   test: /[\\\\/]node_modules[\\\\/]_?echarts(.*)/ // in order to adapt to cnpm</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        commons: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          name: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;chunk-components&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          test: </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;src/components&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">), </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// can customize your rules</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          minChunks: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">3</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  minimum components number</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          priority: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">5</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          reuseExistingChunk: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  optimization: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    splitChunks: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      chunks: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;async&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 有效值为\`all\`，\`async\` 和 \`initial\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      minSize: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">20000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 生成 chunk 的最小体积（≈ 20kb)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      minRemainingSize: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">0</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 确保拆分后剩余的最小 chunk 体积超过限制来避免大小为零的模块</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      minChunks: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 拆分前必须共享模块的最小 chunks 数。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      maxAsyncRequests: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">30</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 最大的按需(异步)加载次数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      maxInitialRequests: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">30</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打包后的入口文件加载时，还能同时加载js文件的数量（包括入口文件）</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      enforceSizeThreshold: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">50000</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      cacheGroups: { </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置提取模块的方案</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        elementUI: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          name: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;chunk-elementUI&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// split elementUI into a single package</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          priority: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">20</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">[</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\\\</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">/]</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">node_modules</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">[</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\\\</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">/]</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">_</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">element-ui(</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">.</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">*</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">)/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// in order to adapt to cnpm</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// echarts: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   name: &#39;chunk-echarts&#39;, // split elementUI into a single package</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   priority: 20, // the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//   test: /[\\\\/]node_modules[\\\\/]_?echarts(.*)/ // in order to adapt to cnpm</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        commons: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          name: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;chunk-components&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          test: </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;src/components&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">), </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// can customize your rules</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          minChunks: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">3</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//  minimum components number</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          priority: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">5</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          reuseExistingChunk: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">};</span></span></code></pre></div><h3 id="魔法注释" tabindex="-1">魔法注释 <a class="header-anchor" href="#魔法注释" aria-label="Permalink to &quot;魔法注释&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 预加载  -》 浏览器空闲的时候进行资源的拉取</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">import</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/* webpackPreload: true */</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;ChartingLibrary&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路由懒加载 路由分包处理  npm run build  /* webpackChunkName: &quot;homeCom&quot; */ =&gt; 魔法注释 分包后进行打包后 包的名字</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#B392F0" })}">import</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/* webpackChunkName: &quot;loginChunk&quot; */</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;@/views/login/index&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 预加载  -》 浏览器空闲的时候进行资源的拉取</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">import</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/* webpackPreload: true */</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;ChartingLibrary&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 路由懒加载 路由分包处理  npm run build  /* webpackChunkName: &quot;homeCom&quot; */ =&gt; 魔法注释 分包后进行打包后 包的名字</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">import</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">/* webpackChunkName: &quot;loginChunk&quot; */</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;@/views/login/index&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span></code></pre></div><ol><li>Webpack 调试</li><li>Webpack 构建流程</li><li>热更新（HRM）原理</li><li>Webpack 核心库 Tapabel 介绍</li><li>tree-shaking 原理</li><li>babel &amp; AST 语法树</li></ol><h2 id="webpack5新特性" tabindex="-1">webpack5新特性 <a class="header-anchor" href="#webpack5新特性" aria-label="Permalink to &quot;webpack5新特性&quot;">​</a></h2><p>webpack5 新增资源模块(asset module)，允许使用资源文件（字体，图标等）而无需配置额外的 loader。</p><ul><li>asset/resource 将资源分割为单独的文件，并导出 url，类似之前的 file-loader 的功能.</li><li>asset/inline 将资源导出为 dataUrl 的形式，类似之前的 url-loader 的小于 limit 参数时功能.</li><li>asset/source 将资源导出为源码（source code）. 类似的 raw-loader 功能.</li><li>asset 会根据文件大小来选择使用哪种类型，当文件小于 8 KB（默认） 的时候会使用 asset/inline，否则会使用 asset/resource</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ./src/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ... </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">(jpe</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">g</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">png</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">gif)</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        type: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;asset&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        generator: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件位置以及文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// [ext] 自带 &quot;.&quot; 这个与 url-loader 配置不同</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          filename: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;[name][hash:8][ext]&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        parser: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          dataUrlCondition: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            maxSize: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">50</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">*</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1024</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//超过50kb不转 base64</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">(woff2</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">eot</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">ttf</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">otf)(</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\?</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">.</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">*</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">)</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">?$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        type: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;asset&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        generator: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件位置以及文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          filename: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;[name][hash:8][ext]&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        parser: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          dataUrlCondition: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">            maxSize: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">10</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">*</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1024</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 超过100kb不转 base64</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">module</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">.</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">exports</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> (</span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">env</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#FFAB70" })}">argv</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">) </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  console.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">log</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;argv.mode=&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,argv.mode) </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打印 mode(模式) 值</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里可以通过不同的模式修改 config 配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">return</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> config;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ./src/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ... </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">(jpe</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">g</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">png</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">gif)</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        type: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;asset&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        generator: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件位置以及文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// [ext] 自带 &quot;.&quot; 这个与 url-loader 配置不同</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          filename: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;[name][hash:8][ext]&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        parser: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          dataUrlCondition: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            maxSize: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">50</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">*</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1024</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//超过50kb不转 base64</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">(woff2</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">eot</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">ttf</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">otf)(</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\?</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">.</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">*</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">)</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">?$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        type: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;asset&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        generator: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 输出文件位置以及文件名</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          filename: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;[name][hash:8][ext]&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        parser: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          dataUrlCondition: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">            maxSize: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">10</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">*</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1024</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 超过100kb不转 base64</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#005CC5" })}">module</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">.</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">exports</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E36209" })}">env</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#E36209" })}">argv</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">) </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  console.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">log</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;argv.mode=&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,argv.mode) </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 打印 mode(模式) 值</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 这里可以通过不同的模式修改 config 配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">return</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> config;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div><h2 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">​</a></h2><p><a href="https://webpack.docschina.org/loaders/" target="_blank" rel="noreferrer">webpack官网</a></p><p><strong>1、常用的 loader 以及 作用</strong></p><ul><li><p>raw-loader：加载文件原始内容（utf-8）</p></li><li><p>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)</p></li><li><p>url-loader：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)</p></li><li><p>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</p></li><li><p>svg-inline-loader：将压缩后的 SVG 内容注入代码中</p></li><li><p>image-loader：加载并且压缩图片文件</p></li><li><p>json-loader 加载 JSON 文件（默认包含）</p></li><li><p>handlebars-loader: 将 Handlebars 模版编译成函数并返回</p></li><li><p>babel-loader：把 ES6 转换成 ES5</p></li><li><p>ts-loader: 将 TypeScript 转换成 JavaScript</p></li><li><p>awesome-typescript-loader：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</p></li><li><p>sass-loader：将SCSS/SASS代码转换成CSS</p></li><li><p>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</p></li><li><p>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS</p></li><li><p>postcss-loader：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀</p></li><li><p>eslint-loader：通过 ESLint 检查 JavaScript 代码</p></li><li><p>tslint-loader：通过 TSLint检查 TypeScript 代码</p></li><li><p>mocha-loader：加载 Mocha 测试用例的代码</p></li><li><p>coverjs-loader：计算测试的覆盖率</p></li><li><p>vue-loader：加载 Vue.js 单文件组件</p></li><li><p>i18n-loader: 国际化</p></li><li><p>cache-loader: 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里</p></li><li><p>cross-env</p><p>环境的区分</p></li><li><p>style-loader</p><p>将处理好的 css 通过 style 标签的形式添加到页面上</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 核心逻辑 - 通过动态添加 style 标签的方式，将样式引入页面</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">content</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">\`\${</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">样式内容</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">}\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">style</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;style&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">style.innerHTML </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> content;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">document.head.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(style);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 核心逻辑 - 通过动态添加 style 标签的方式，将样式引入页面</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">content</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">\`\${</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">样式内容</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">}\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">style</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> document.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">createElement</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;style&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">style.innerHTML </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> content;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">document.head.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">appendChild</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(style);</span></span></code></pre></div></li><li><p>postcss-loader</p><p>自动添加 CSS3 部分属性的浏览器前缀，解决css兼容性问题。</p></li><li><p>less-loader sass-loader</p><p>less/sass 解析</p></li><li><p>处理图片文件</p><ul><li>file-loader 解决图片引入问题，并将图片 copy 到指定目录，默认为 dist</li><li>url-loader 当图片小于 limit 值的时候，会将图片转为 base64 编码，大于 limit 值的时候依然是使用 file-loader 进行拷贝</li><li>img-loader 压缩图片</li></ul></li></ul><p><strong>2、常用的 plugin 以及 作用</strong></p><ul><li><p>define-plugin：定义环境变量 (Webpack4 之后指定 mode 会自动配置)</p></li><li><p>ignore-plugin：忽略部分文件</p></li><li><p>html-webpack-plugin：简化 HTML 文件创建 (依赖于 html-loader)</p></li><li><p>web-webpack-plugin：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用</p></li><li><p>uglifyjs-webpack-plugin：不支持 ES6 压缩 (Webpack4 以前)</p></li><li><p>terser-webpack-plugin: 支持压缩 ES6 (Webpack4)</p></li><li><p>webpack-parallel-uglify-plugin: 多进程执行代码压缩，提升构建速度</p></li><li><p>mini-css-extract-plugin: 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代extract-text-webpack-plugin)</p></li><li><p>serviceworker-webpack-plugin：为网页应用增加离线缓存功能</p></li><li><p>clean-webpack-plugin: 目录清理</p></li><li><p>ModuleConcatenationPlugin: 开启 Scope Hoisting</p></li><li><p>speed-measure-webpack-plugin: 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)</p></li><li><p>webpack-bundle-analyzer: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</p></li><li><p>html-webpack-plugin</p><p>打包后的资源文件，例如：js 或者 css 文件可以自动引入到 Html 中</p></li><li><p>clean-webpack-plugin</p><p>打包前自动清空打包目录</p></li><li><p>webpack-dev-server</p><p>本地服务</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 参考配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack.config.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// contentBase -》 直接到对应的静态目录下面去读取静态文件，而不需对文件做任何移动，节省了时间和性能开销</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  devServer: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    contentBase: path.</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;public&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">), </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 静态文件目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    compress: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">true</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//是否启动压缩 gzip</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    port: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">8080</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 端口号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// open:true  // 是否自动打开浏览器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 参考配置</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// webpack.config.js</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// contentBase -》 直接到对应的静态目录下面去读取静态文件，而不需对文件做任何移动，节省了时间和性能开销</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  devServer: {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    contentBase: path.</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">resolve</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(__dirname, </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;public&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">), </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 静态文件目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    compress: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">true</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//是否启动压缩 gzip</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    port: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">8080</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 端口号</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// open:true  // 是否自动打开浏览器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span></code></pre></div></li><li><p>cross-env</p><p>环境的区分</p></li><li><p>mini-css-extract-plugin</p><p><strong>通过 CSS 文件的形式引入到页面上</strong>。tip: style-loader 将样式通过 style 标签的形式添加到页面上</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 引入插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">MiniCssExtractPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">require</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">(</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;mini-css-extract-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">config</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#85E89D", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">(s</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">[ac]</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">|</span><span style="${ssrRenderStyle({ "color": "#DBEDFF" })}">c)ss</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">$</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">i</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//匹配所有的 sass/scss/css 文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// &#39;style-loader&#39;,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          MiniCssExtractPlugin.loader, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 添加 loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;css-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;postcss-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">          </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;sass-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">        ] </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  plugins:[ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">MiniCssExtractPlugin</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 添加插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      filename: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;[name].[hash:8].css&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 引入插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">MiniCssExtractPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">require</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">(</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;mini-css-extract-plugin&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">config</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  module: { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    rules: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        test:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}"> /</span><span style="${ssrRenderStyle({ "color": "#22863A", "font-weight": "bold" })}">\\.</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">(s</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">[ac]</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">|</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">c)ss</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">$</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">/</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">i</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//匹配所有的 sass/scss/css 文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        use: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// &#39;style-loader&#39;,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          MiniCssExtractPlugin.loader, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 添加 loader</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;css-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;postcss-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">          </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;sass-loader&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">        ] </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  plugins:[ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 配置插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">new</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">MiniCssExtractPlugin</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({ </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// 添加插件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      filename: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;[name].[hash:8].css&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    }),</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// ...</span></span></code></pre></div></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("front/CICD/webpack.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const webpack = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  webpack as default
};
